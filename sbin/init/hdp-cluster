#!/bin/bash 

# This script is for training purposes only and is to be used only
# in support of approved training. The author assumes no liability
# for use outside of a training environments. Unless required by
# applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied.
#
# Title: hdp-cluster.sh 
# Author:  WKD
# Date: 190410
# Purpose: Startup and shutdown script for the hdp clusters. 
# When you set Ambari to use HTTPS you must change the 
# HTTP and the Port

# DEBUG
# set -x
#set -eu
#set >> /root/setvar.txt

# VARIABLES
OPTION=$1
NUMARGS=$#
COUNTER=0
AMBARI_HTTP=https
AMBARI_HOST=admin01.cloudair.lan
AMBARI_PORT=8443
AMBARI_URL=${AMBARI_HTTP}://${AMBARI_HOST}:${AMBARI_PORT}
AMBARI_USER=admin
AMBARI_PASSWORD=admin
DATETIME=$(date +%Y%m%d%H%M)
LOGDIR=/var/log/ambari-server
LOGFILE="${LOGDIR}/ambari-docker.log"

# FUNCTIONS
function usage() {
        echo "Usage: $(basename $0) [check|start|stop|status|restart]"
        exit 2
}

function checkRoot() {
# Testing for root

        if [ "$(id -u)" != 0 ]; then
                echo "ERROR: This script must be run as user root" 1>&2
                usage
        fi
}

function checkArg() {
# Check if arguments exits

        if [ ${NUMARGS} -ne "$1" ]; then
                usage
        fi
}

function checkLogDir() {
# Check if the log dir exists if not make the log dir

        if [ ! -d "${LOGDIR}" ]; then
                mkdir ${LOGDIR}
		
        fi
}

function statusAmbari() {
# Status the Ambari Servers

	WAIT=0

	echo "Ambari Docker status at ${DATETIME}" | tee >> ${LOGFILE}

	while [  ${WAIT} -eq 0 ]; do
               	STATUS=$(curl -k ${AMBARI_URL})

               	if [[ "${STATUS}" =~ "<title>Ambari</title>" ]]; then
			echo "Ambari is running" | tee >> ${LOGFILE}
                       	WAIT=1
               	else
                        echo "Ambari is not running -- waiting 30 seconds" | tee >> ${LOGFILE}
                        sleep 30

			((++COUNTER))
			if [ ${COUNTER} -gt 5 ]; then
				echo "Ambari did not start" | tee >> ${LOGFILE}
				exit
			fi
                fi
        done
}

function setClusterName() {
# Set the name of the cluster to a variable

        CLUSTER_NAME=$(curl -k -u ${AMBARI_USER}:${AMBARI_PASSWORD} -H "X-Requested-By: ambari" -i ${AMBARI_URL}/api/v1/clusters | grep '"cluster_name" :' | awk '{ print $3 }' | sed 's/,//g' | sed 's/"//g')	
	echo "The cluster name is ${CLUSTER_NAME}" | tee >> ${LOGFILE}
}

function startCluster() {
# Start the cluster

	echo "Ambari Docker start cluster at ${DATETIME}" | tee >> ${LOGFILE}

	/usr/bin/curl -k -s -u ${AMBARI_USER}:${AMBARI_PASSWORD} -i -H 'X-Requested-By: ambari' -X PUT -d '{"RequestInfo": {"context" :"Start all services"}, "Body": {"ServiceInfo": {"state": "STARTED"}}}' ${AMBARI_URL}/api/v1/clusters/${CLUSTER_NAME}/services?ServiceInfo
}

function stopCluster() {
# Ensure a clean restart by stopping before starting the cluster

	echo "Ambari Docker stop cluster at ${DATETIME}" | tee >> ${LOGFILE}

        /usr/bin/curl -k -s -u ${AMBARI_USER}:${AMBARI_PASSWORD} -i -H 'X-Requested-By: ambari' -X PUT -d '{"RequestInfo": {"context" :"Stop all services"}, "Body": {"ServiceInfo": {"state": "INSTALLED"}}}' ${AMBARI_URL}/api/v1/clusters/${CLUSTER_NAME}/services?ServiceInfo
}

function statusCluster() {
# Test the status of the cluster

        	STATUS=$(sudo curl -k -u ${AMBARI_USER}:${AMBARI_PASSWORD} -i -H 'X-Requested-By: ambari' ${AMBARI_URL}/api/v1/clusters/${CLUSTER_NAME}/services/YARN?fields=ServiceInfo/state | grep "STARTED" | awk '{ print $3 }' | sed 's/"//g')

                if [[ "${STATUS}" =~ "STARTED" ]]; then
                	echo "Cluster is running" | tee >> ${LOGFILE}
		else
		
                	echo "Cluster is not running" | tee >> ${LOGFILE}
		fi
}

function runOption() {
	case "${OPTION}" in 
		-h | --help)
			usage
			;;
		check)
			statusAmbari
			;;
		start)
			setClusterName
			startCluster
   			;;
		stop)
			setClusterName
			stopCluster
   			;;
		restart)
   			$0 stop
   			$0 start
   			;; 
		status)
			setClusterName
			statusCluster
			;;
		*)
			usage
			;;
	esac
	exit 0 
}

# MAIN
checkRoot
checkArg 1
checkLogDir
runOption
