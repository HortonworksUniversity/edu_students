{"paragraphs":[{"text":"%md\n# About This Lab\n**Objective:** Analyze data using DataFrame queries, practice using column expressions in queries. Use DataFrames by grouping and aggregating data, and by \njoining two DataFrames. Query multiple sets of data to find out how many of each mobile device model is used in active accounts.\n**File locations:** \n    Exercise directory: /home/training/training_materials/devsh/exercises/analyze\n    Data (local): /home/training/training_materials/devsh/data/accountdevice\n                  /home/training/training_materials/devsh/data/base_stations.parquet\n    Data (HDFS): /devsh_loudacre/devices.json\n**Successful outcome:**\n**Before you begin:**\n**Related lessons:** Analyzing Data with DataFrame Queries\n\n---","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>About This Lab</h1>\n<p><strong>Objective:</strong> Analyze data using DataFrame queries, practice using column expressions in queries. Use DataFrames by grouping and aggregating data, and by\n<br  />joining two DataFrames. Query multiple sets of data to find out how many of each mobile device model is used in active accounts.\n<br  /><strong>File locations:</strong></p>\n<pre><code>Exercise directory: /home/training/training_materials/devsh/exercises/analyze\nData (local): /home/training/training_materials/devsh/data/accountdevice\n              /home/training/training_materials/devsh/data/base_stations.parquet\nData (HDFS): /devsh_loudacre/devices.json\n</code></pre>\n<p><strong>Successful outcome:</strong>\n<br  /><strong>Before you begin:</strong>\n<br  /><strong>Related lessons:</strong> Analyzing Data with DataFrame Queries</p>\n<hr />\n"}]},"apps":[],"jobName":"paragraph_1617123762644_1186881465","id":"20171105-200834_1116095891","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:459040"},{"text":"%md\n# Setup\n---","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Setup</h1>\n<hr />\n"}]},"apps":[],"jobName":"paragraph_1617123762647_-1720868972","id":"20181114-164229_902436001","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459041"},{"title":"Delete HDFS files to prevent file exists errors","text":"%sh\n\n# The following allow this notebook to run without errors\nhdfs dfs -rm -r -f -skipTrash /devsh_loudacre/base_stations.parquet\nhdfs dfs -rm -r -f -skipTrash /devsh_loudacre/accountdevice","user":"anonymous","dateUpdated":"2021-03-30T13:23:58-0700","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1617123762647_349205585","id":"20200112-182718_327301360","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:23:58-0700","dateFinished":"2021-03-30T13:24:02-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459042"},{"title":"Add JSON file to HDFS","text":"%sh\n\n# This prevents returning an error\n!(hdfs dfs -test -f /devsh_loudacre/devices.json) && hdfs dfs -put data/devices.json /devsh_loudacre || echo \"\" ","user":"anonymous","dateUpdated":"2021-03-30T13:24:07-0700","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1617123762647_2093358553","id":"20210203-022924_191524722","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:24:07-0700","dateFinished":"2021-03-30T13:24:09-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459043"},{"title":"Set the environment variable to manage thread count","text":"%sh\n\nPYSPARK_PIN_THREAD=true","user":"anonymous","dateUpdated":"2021-03-30T13:24:12-0700","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1617123762648_337007997","id":"20200830-132009_1410029588","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:24:12-0700","dateFinished":"2021-03-30T13:24:12-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459044"},{"title":"Start the Spark Context for Livy","text":"%pyspark\n\nsc = spark.sparkContext","user":"anonymous","dateUpdated":"2021-03-30T13:24:15-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<font color=\"red\">Previous livy session is expired, new livy session is created. Paragraphs that depend on this paragraph need to be re-executed!</font>"}]},"apps":[],"jobName":"paragraph_1617123762648_-1304629666","id":"20200830-132206_964008522","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:24:15-0700","dateFinished":"2021-03-30T13:25:01-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459045"},{"text":"%md\n# Lab\n---","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Lab</h1>\n<hr />\n"}]},"apps":[],"jobName":"paragraph_1617123762648_949609539","id":"20181114-164844_1661453681","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459046"},{"title":"","text":"%md\n### Review Apache Spark Documentation\nReview the API docs for the Column class (which is in the Python module pyspark.sql and the Scala package org.apache.spark.sql). Take note of the various options available.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false,"completionKey":"TAB"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"title":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Review Apache Spark Documentation</h3>\n<p>Review the API docs for the Column class (which is in the Python module pyspark.sql and the Scala package org.apache.spark.sql). Take note of the various options available.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762648_89821910","id":"20171105-200519_752831754","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459047"},{"text":"%md\n### Query DataFrames Using Column Expressions","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Query DataFrames Using Column Expressions</h3>\n"}]},"apps":[],"jobName":"paragraph_1617123762649_-202857602","id":"20210122-190511_397010330","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459048"},{"title":"1 - Create a new DataFrame called accountsDF based on the Hive devsh.accounts table","text":"%pyspark\n\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762649_-171446329","id":"20171105-200623_656362182","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459049"},{"title":"2 - Try a simple query with select, using both column reference syntaxes","text":"%pyspark\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"first_name":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}},"3":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"first_name":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762649_-1393527666","id":"20200112-141613_1583455176","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459050"},{"title":"3 - Create a column object to work with, based on the first_name column in the accountsDF DataFrame","text":"%pyspark","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762649_-1124068596","id":"20171105-201709_849284875","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459051"},{"text":"%md\nNote that the object type is Column.\nNew Column objects are created when you perform operations on existing columns. Create a new Column object based on a column expression that identifies \nusers whose first name is Lucy using the equality operator on the fnCol object you created above.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Note that the object type is Column.\n<br  />New Column objects are created when you perform operations on existing columns. Create a new Column object based on a column expression that identifies\n<br  />users whose first name is Lucy using the equality operator on the fnCol object you created above.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762650_1204820010","id":"20171105-201449_1118165660","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459052"},{"title":"4 - Create a Column object based on a column expression","text":"%pyspark\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762650_-357237930","id":"20200112-142301_2075872697","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459053"},{"text":"%md\nUse the `lucyCol` column expression in a select statement. Because `lucyCol` is based on a boolean expression, the column values will be true or false \ndepending on the value of the `first_name column`. Confirm that users named Lucy are identified with the value true.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Use the <code>lucyCol</code> column expression in a select statement. Because <code>lucyCol</code> is based on a boolean expression, the column values will be true or false\n<br  />depending on the value of the <code>first_name column</code>. Confirm that users named Lucy are identified with the value true.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762650_-37241269","id":"20200112-143020_171776722","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459054"},{"title":"5 - Use the lucyCol column expression in a select statement","text":"%pyspark\n\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762651_1631377049","id":"20200112-143038_1552091137","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459055"},{"text":"%md\nThe `where` operation requires a boolean-based column expression. Use the `lucyCol` column expression in a where transformation and view the data in the \nresulting DataFrame. Confirm that only users named Lucy are in the data.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The <code>where</code> operation requires a boolean-based column expression. Use the <code>lucyCol</code> column expression in a where transformation and view the data in the\n<br  />resulting DataFrame. Confirm that only users named Lucy are in the data.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762651_295564152","id":"20200112-145709_1691721982","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459056"},{"title":"6 - Use the lucyCol column expression in a where transformation ","text":"%pyspark","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762651_-1401718668","id":"20200112-145751_2045012434","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459057"},{"text":"%md\nColumn expressions do not need to be assigned to a variable.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Column expressions do not need to be assigned to a variable.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762651_27105071","id":"20200112-150456_1848116582","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459058"},{"title":"7 - Try the same query without using the lucyCol variable","text":"%pyspark\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762652_123678788","id":"20200112-150525_949779830","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459059"},{"text":"%md\nColumn expressions are not limited to where operations like those above. They can be used in any transformation for which a simple column could be used, \nsuch as a select. Try selecting the city and state columns, and the first three characters of the phone_number column (in the U.S., the first three digits \nof a phone number are known as the area code). Use the substr operator on the phone_number column to extract the area code.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Column expressions are not limited to where operations like those above. They can be used in any transformation for which a simple column could be used,\n<br  />such as a select. Try selecting the city and state columns, and the first three characters of the phone_number column (in the U.S., the first three digits\n<br  />of a phone number are known as the area code). Use the substr operator on the phone_number column to extract the area code.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762652_-1484817910","id":"20200112-150851_1465971801","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459060"},{"title":"8 - Select the city and state columns and the first three characters of the phone number column","text":"%pyspark","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762652_-1044053992","id":"20200112-151053_2116683653","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459061"},{"text":"%md\nNotice that in the last step, the values returned by the query were correct, but the column name was substring(phone_number, 1, 3), which is long and \nhard to work with. ","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Notice that in the last step, the values returned by the query were correct, but the column name was substring(phone_number, 1, 3), which is long and\n<br  />hard to work with.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762653_-388720223","id":"20200112-151526_1064767945","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459062"},{"title":"9 - Repeat the same query, using the alias operator to rename that column as area_code","text":"%pyspark\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762653_-1210522060","id":"20200112-151611_1794288754","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459063"},{"text":"%md\nPerform a query that results in a DataFrame with just first_name and last_name columns, and only includes users whose first and last names both begin \nwith the same two letters. (For example, the user Roberta Roget would be included, because both her first and last names begin with “Ro”.)","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Perform a query that results in a DataFrame with just first_name and last_name columns, and only includes users whose first and last names both begin\n<br  />with the same two letters. (For example, the user Roberta Roget would be included, because both her first and last names begin with “Ro”.)</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762653_257986406","id":"20200112-151929_1221629183","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459064"},{"title":"10 - Perform a query with just first_name and last_name columns, and only includes users whose first and last names both begin with the same two letters","text":"%pyspark\n\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762653_1334589904","id":"20200112-152044_1891437338","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459065"},{"text":"%md\n### Group and Count Data by Name\n\nQuery the accountsDF DataFrame using groupBy with count to find out the total number people sharing each last name. \n(Note that the count aggregation transformation returns a DataFrame, unlike the count DataFrame action, which returns a single value to the driver.)","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Group and Count Data by Name</h3>\n<p>Query the accountsDF DataFrame using groupBy with count to find out the total number people sharing each last name.\n<br  />(Note that the count aggregation transformation returns a DataFrame, unlike the count DataFrame action, which returns a single value to the driver.)</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762654_-1158318537","id":"20200112-152713_393120046","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459066"},{"title":"11 - Query the accountsDF DataFrame using groupBy with count","text":"%pyspark","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762654_-1904651819","id":"20200112-152806_1340776577","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459067"},{"text":"%md\nYou can also group by multiple columns.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>You can also group by multiple columns.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762654_-1264133109","id":"20200112-153217_974581894","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459068"},{"title":"12 - Query accountsDF again, this time counting the number of people who share the same last and first name","text":"%pyspark","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762655_-218963790","id":"20200112-153259_1823976934","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459069"},{"text":"%md\n### Join Account Data with Cellular Towers by Zip Code\n\nIn this section, you will join the accounts data that you have been using with data about cell tower base station locations, which is in the base_stations.parquet file. \nStart by reviewing the schema and a few records of the data using the parquet-tools command.\n\n\n```shell\n$ parquet-tools schema data/base_stations.parquet\n$ parquet-tools head data/base_stations.parquet\n```","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Join Account Data with Cellular Towers by Zip Code</h3>\n<p>In this section, you will join the accounts data that you have been using with data about cell tower base station locations, which is in the base_stations.parquet file.\n<br  />Start by reviewing the schema and a few records of the data using the parquet-tools command.</p>\n<pre><code class=\"shell\">$ parquet-tools schema data/base_stations.parquet\n$ parquet-tools head data/base_stations.parquet\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1617123762655_-50565622","id":"20200112-153814_1924777085","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459070"},{"title":"13 - Review the schema and a few records of the data using the parquet-tools command","text":"%sh\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762655_-1662680036","id":"20200112-153926_2041877918","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459071"},{"title":"14 - Upload the base_stations.parquet file to /devsh_loudacre","text":"%sh\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762655_455700020","id":"20200112-155029_173640731","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459072"},{"text":"%md\nCreate a new DataFrame called baseDF using the base stations data. Review the baseDF schema and data to ensure it matches the data in the Parquet file.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Create a new DataFrame called baseDF using the base stations data. Review the baseDF schema and data to ensure it matches the data in the Parquet file.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762656_205379762","id":"20200112-155545_1557712468","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459073"},{"title":"15 - Create a new DataFrame called baseDF using the base stations data","text":"%pyspark\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762656_924214687","id":"20200112-155648_2079735864","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459074"},{"text":"%md\nSome account holders live in zip codes that have a base station. Join baseDF and accountsDF to find those users.\nFor each of those users, include their account ID, first name, last name, and the ID and location data (latitude and longitude) for the base station in \ntheir zip code.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Some account holders live in zip codes that have a base station. Join baseDF and accountsDF to find those users.\n<br  />For each of those users, include their account ID, first name, last name, and the ID and location data (latitude and longitude) for the base station in\n<br  />their zip code.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762656_-962102981","id":"20200112-160205_74480421","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459075"},{"title":"16 - Join baseDF and accountsDF to find users that live close to a base station","text":"%pyspark\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762657_483421336","id":"20200112-160341_929651332","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459076"},{"text":"%md\n### Count Active Devices\n\nThe accountdevice CSV dataset contains a list of all the devices used by all accounts. Each row in the data set includes a row ID, an account ID, an ID for \nthe type of device, the date the device was activated for the account, and the specific device ID. The CSV data file is in the /home/training/training_materials/devsh/data/accountdevice directory. \nReview the data in the data set, then upload the directory and its contents to the HDFS directory /devsh_loudacre/accountdevice.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Count Active Devices</h3>\n<p>The accountdevice CSV dataset contains a list of all the devices used by all accounts. Each row in the data set includes a row ID, an account ID, an ID for\n<br  />the type of device, the date the device was activated for the account, and the specific device ID. The CSV data file is in the /home/training/training_materials/devsh/data/accountdevice directory.\n<br  />Review the data in the data set, then upload the directory and its contents to the HDFS directory /devsh_loudacre/accountdevice.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762657_-82464775","id":"20200112-161100_980854870","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459077"},{"title":"17 - Upload the accountdevice directory in /devsh_loudacre/","text":"%sh\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762657_1499644632","id":"20200112-161628_1343845372","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459078"},{"title":"18 - Create a DataFrame from the account device data","text":"%pyspark\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762658_1547020471","id":"20200112-162551_2018321312","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459079"},{"text":"%md\nUse the account device data and the DataFrames you created previously in this exercise to find the total number of each device model across all active \naccounts— that is, accounts that have not been closed. The new DataFrame should be sorted from most to least common model. \nSave the data as Parquet files in a directory called /devsh_loudacre/top_devices with the following columns:\n\n```code\n| Column Name    | Description                                                                                    |    Example      |\n| -------------- |------------------------------------------------------------------------------------------------| ----------------|\n| device_id      | The ID number of each known device (including those that might not be in use by any account)   |              18 |\n| make           | The manufacturer name for the device                                                           |           Ronin |\n| model          | The model name for the device                                                                  |  Novelty Note 2 |\n| active_num     | The total number of the model used by active accounts                                          |            2092 |\n```\n\nHints:\n\n* Active accounts are those with a null value for acct_close_dt (account close date) in the accounts table.\n* The account_id column in the device accounts data corresponds to the acct_num column in accounts table.\n* The device_id column in the device accounts data corresponds to the devnum column in the list of known devices in \n  the /devsh_loudacre/devices.json file.\n* When you count devices, use withColumnRenamed to rename the count column to active_num. (The count column name is ambiguous because it is both a \n  function and a column.)\n* The query to complete this exercise is somewhat complicated and includes a sequence of many transformations. You may wish to assign variables to \n  the intermediate DataFrames resulting from the transformations that make up the query to make the code easier to work with and debug.\n\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Use the account device data and the DataFrames you created previously in this exercise to find the total number of each device model across all active\n<br  />accounts— that is, accounts that have not been closed. The new DataFrame should be sorted from most to least common model.\n<br  />Save the data as Parquet files in a directory called /devsh_loudacre/top_devices with the following columns:</p>\n<pre><code class=\"code\">| Column Name    | Description                                                                                    |    Example      |\n| -------------- |------------------------------------------------------------------------------------------------| ----------------|\n| device_id      | The ID number of each known device (including those that might not be in use by any account)   |              18 |\n| make           | The manufacturer name for the device                                                           |           Ronin |\n| model          | The model name for the device                                                                  |  Novelty Note 2 |\n| active_num     | The total number of the model used by active accounts                                          |            2092 |\n</code></pre>\n<p>Hints:</p>\n<ul>\n<li>Active accounts are those with a null value for acct_close_dt (account close date) in the accounts table.</li>\n<li>The account_id column in the device accounts data corresponds to the acct_num column in accounts table.</li>\n<li>The device_id column in the device accounts data corresponds to the devnum column in the list of known devices in\n<br  />the /devsh_loudacre/devices.json file.</li>\n<li>When you count devices, use withColumnRenamed to rename the count column to active_num. (The count column name is ambiguous because it is both a\n<br  />function and a column.)</li>\n<li>The query to complete this exercise is somewhat complicated and includes a sequence of many transformations. You may wish to assign variables to\n<br  />the intermediate DataFrames resulting from the transformations that make up the query to make the code easier to work with and debug.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1617123762658_210865218","id":"20200112-162831_117312701","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459080"},{"title":"19 - Find the total number of each device across all active accounts","text":"%pyspark","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1617123762658_-1730465759","id":"20200112-164930_1004463609","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459081"},{"text":"%md\n# Result\n**You have now:** worked with dataframes to perform data analysis\n\n---\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Result</h1>\n<p><strong>You have now:</strong> worked with dataframes to perform data analysis</p>\n<hr />\n"}]},"apps":[],"jobName":"paragraph_1617123762659_-85902938","id":"20181119-142716_792318228","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459082"},{"text":"%md\n# Solution\n---","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Solution</h1>\n<hr />\n"}]},"apps":[],"jobName":"paragraph_1617123762659_198118853","id":"20171113-155535_1769142099","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459083"},{"text":"%md\n### Review Apache Spark Documentation\n\nReview the API docs for the Column class (which is in the Python module pyspark.sql and the Scala package org.apache.spark.sql). Take note of the various \noptions available.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Review Apache Spark Documentation</h3>\n<p>Review the API docs for the Column class (which is in the Python module pyspark.sql and the Scala package org.apache.spark.sql). Take note of the various\n<br  />options available.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762659_1152792404","id":"20210121-144400_75664864","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459084"},{"text":"%md\n### Query DataFrames Using Column Expressions","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Query DataFrames Using Column Expressions</h3>\n"}]},"apps":[],"jobName":"paragraph_1617123762659_1149362585","id":"20210122-190705_692419501","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459085"},{"title":"1 - Create a new DataFrame called accountsDF based on the Hive devsh.accounts table","text":"%pyspark\n\naccountsDF = spark.read.table(\"devsh.accounts\")","user":"anonymous","dateUpdated":"2021-03-30T13:27:50-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"acct_num":"string","acct_create_dt":"string","acct_close_dt":"string","first_name":"string","last_name":"string","address":"string","city":"string","state":"string","zipcode":"string","phone_number":"string","created":"string","modified":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1617123762660_1765905092","id":"20200112-140838_1768087801","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:27:50-0700","dateFinished":"2021-03-30T13:27:53-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459086"},{"title":"2 - Try a simple query with select, using both column reference syntaxes","text":"%pyspark\n\nsc.setJobGroup(\"DataFrame Queries\",\"Perform a select using the column name\")\naccountsDF.select(accountsDF[\"first_name\"]).show(5)\n\nsc.setJobGroup(\"DataFrame Queries\",\"Perform a select using the dot notation\")\naccountsDF.select(accountsDF.first_name).show(5)","user":"anonymous","dateUpdated":"2021-03-30T13:29:58-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"first_name":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}},"3":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"first_name":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+\n|first_name|\n+----------+\n|    Donald|\n|     Donna|\n|    Dorthy|\n|     Leila|\n|     Anita|\n+----------+\nonly showing top 5 rows\n\n+----------+\n|first_name|\n+----------+\n|    Donald|\n|     Donna|\n|    Dorthy|\n|     Leila|\n|     Anita|\n+----------+\nonly showing top 5 rows"}]},"apps":[],"jobName":"paragraph_1617123762660_1413782763","id":"20181115-092436_561920580","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:29:58-0700","dateFinished":"2021-03-30T13:30:03-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459087"},{"text":"%md\n#### Types of column references\nUse both column reference syntaxes.\nColumn name `accountsDF[\"first_name\"]`\nDot notation `accountsDF.first_name`","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Types of column references</h4>\n<p>Use both column reference syntaxes.\n<br  />Column name <code>accountsDF[\"first_name\"]</code>\n<br  />Dot notation <code>accountsDF.first_name</code></p>\n"}]},"apps":[],"jobName":"paragraph_1617123762660_934575171","id":"20210121-154157_1254144985","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459088"},{"title":"3 - Create a column object to work with, based on the first_name column in the accountsDF DataFrame","text":"%pyspark\n\nfnCol = accountsDF.first_name","user":"anonymous","dateUpdated":"2021-03-30T13:37:27-0700","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1617123762661_818954680","id":"20200112-141802_1054964679","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:37:27-0700","dateFinished":"2021-03-30T13:37:28-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459089"},{"text":"%md\nNew Column objects are created when you perform operations on existing columns. These are of object type `Column`.\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>New Column objects are created when you perform operations on existing columns. These are of object type <code>Column</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762661_-1808125922","id":"20210121-144529_1694404663","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459090"},{"title":"4 - Create a Column object based on a column expression","text":"%pyspark\n\nlucyCol = (fnCol == \"Lucy\")","user":"anonymous","dateUpdated":"2021-03-30T13:37:35-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1617123762661_687661109","id":"20200112-142648_9596488","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:37:35-0700","dateFinished":"2021-03-30T13:37:36-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459091"},{"text":"%md\nSimilar to the SQL `where` clause a function can search a column for specific rows. Create a new Column object based on a column expression that identifies \nusers whose first name is `Lucy`. Use the equality operator on the `fnCol` object you created above.\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Similar to the SQL <code>where</code> clause a function can search a column for specific rows. Create a new Column object based on a column expression that identifies\n<br  />users whose first name is <code>Lucy</code>. Use the equality operator on the <code>fnCol</code> object you created above.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762661_1058077828","id":"20210121-144650_2146158373","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459092"},{"title":"5 - Use the lucyCol column expression in a select statement","text":"%pyspark\n\nsc.setJobGroup(\"DataFrame Queries\",\"Use the lucyCol column expression in a select statement\")\naccountsDF.select(accountsDF.first_name,accountsDF.last_name, lucyCol).show()","user":"anonymous","dateUpdated":"2021-03-30T13:37:42-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"first_name":"string","last_name":"string","(first_name = Lucy)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+---------+-------------------+\n|first_name|last_name|(first_name = Lucy)|\n+----------+---------+-------------------+\n|    Donald|   Becton|              false|\n|     Donna|    Jones|              false|\n|    Dorthy| Chalmers|              false|\n|     Leila|  Spencer|              false|\n|     Anita| Laughlin|              false|\n|    Stevie|   Bridge|              false|\n|     David|   Eggers|              false|\n|   Dorothy|  Koopman|              false|\n|      Kara|     Kohl|              false|\n|     Diane|   Nelson|              false|\n|    Robert|   Fisher|              false|\n|    Marcia|  Roberts|              false|\n|    Andres|    Cruse|              false|\n|       Ann|    Moore|              false|\n|    Joseph|   Lackey|              false|\n|     Sarah|   Duvall|              false|\n|      Lucy|   Corley|               true|\n|    Roland| Crawford|              false|\n|     Leona|     Bray|              false|\n|   Forrest|   Becker|              false|\n+----------+---------+-------------------+\nonly showing top 20 rows"}]},"apps":[],"jobName":"paragraph_1617123762662_1332548486","id":"20200112-143300_1634366214","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:37:42-0700","dateFinished":"2021-03-30T13:37:43-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459093"},{"text":"%md\nUse the `lucyCol` column expression in a select statement. Because `lucyCol` is based on a boolean expression, the column values will be true or false \ndepending on the value of the first_name column. Confirm that users named Lucy are identified with the value true.\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Use the <code>lucyCol</code> column expression in a select statement. Because <code>lucyCol</code> is based on a boolean expression, the column values will be true or false\n<br  />depending on the value of the first_name column. Confirm that users named Lucy are identified with the value true.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762662_-1753377041","id":"20210121-145123_1231702253","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459094"},{"title":"6 - Use the lucyCol column expression in a where transformation ","text":"%pyspark\n\nsc.setJobGroup(\"DataFrame Queries\",\"Use the lucyCol column expression in a filter\")\naccountsDF.where(lucyCol).show(5)","user":"anonymous","dateUpdated":"2021-03-30T13:34:59-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"acct_num":"string","acct_create_dt":"string","acct_close_dt":"string","first_name":"string","last_name":"string","address":"string","city":"string","state":"string","zipcode":"string","phone_number":"string","created":"string","modified":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-------------------+-------------------+----------+---------+--------------------+----------+-----+-------+------------+-------------------+-------------------+\n|acct_num|     acct_create_dt|      acct_close_dt|first_name|last_name|             address|      city|state|zipcode|phone_number|            created|           modified|\n+--------+-------------------+-------------------+----------+---------+--------------------+----------+-----+-------+------------+-------------------+-------------------+\n|      17|2008-12-27 23:31:40|               null|      Lucy|   Corley|   4834 Brown Street|Santa Rosa|   CA|  94980|  7076068290|2014-03-18 13:29:47|2014-03-18 13:29:47|\n|    1762|2009-03-19 23:43:00|               null|      Lucy|    Davis|2195 Riverside Drive|Sacramento|   CA|  95620|  9169959437|2014-03-18 13:29:50|2014-03-18 13:29:50|\n|    6551|2010-09-04 19:28:22|2014-02-14 19:19:16|      Lucy|  Casiano|2821 Wood Duck Drive|  Alhambra|   CA|  91810|  6261078791|2014-03-18 13:29:59|2014-03-18 13:29:59|\n|    6978|2010-09-22 07:13:16|               null|      Lucy|      Lee|4781 Shadowmar Drive|   Salinas|   CA|  93961|  8315367970|2014-03-18 13:30:00|2014-03-18 13:30:00|\n|    7107|2010-02-10 00:23:38|2014-01-23 22:55:06|      Lucy| Hastings|   4759 Gateway Road|    Fresno|   CA|  93692|  5595001084|2014-03-18 13:30:00|2014-03-18 13:30:00|\n+--------+-------------------+-------------------+----------+---------+--------------------+----------+-----+-------+------------+-------------------+-------------------+\nonly showing top 5 rows"}]},"apps":[],"jobName":"paragraph_1617123762662_431114393","id":"20200112-145904_1415865387","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:34:59-0700","dateFinished":"2021-03-30T13:35:00-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459095"},{"text":"%md\nThe `where` operation requires a boolean-based column expression. Use the `lucyCol` column expression in a where transformation and view the data in \nthe resulting DataFrame. Show only 10 rows. Confirm that only users named Lucy are in the data.\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The <code>where</code> operation requires a boolean-based column expression. Use the <code>lucyCol</code> column expression in a where transformation and view the data in\n<br  />the resulting DataFrame. Show only 10 rows. Confirm that only users named Lucy are in the data.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762663_-807294225","id":"20210121-145258_227610107","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459096"},{"title":"7 - Try the same query without using the lucyCol variable","text":"%pyspark\n\nsc.setJobGroup(\"DataFrame Queries\",\"Try the same query without using the lucyCol variable\")\naccountsDF.where(accountsDF.first_name == \"Lucy\").show(5)","user":"anonymous","dateUpdated":"2021-03-30T13:37:57-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"acct_num":"string","acct_create_dt":"string","acct_close_dt":"string","first_name":"string","last_name":"string","address":"string","city":"string","state":"string","zipcode":"string","phone_number":"string","created":"string","modified":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-------------------+-------------------+----------+---------+--------------------+----------+-----+-------+------------+-------------------+-------------------+\n|acct_num|     acct_create_dt|      acct_close_dt|first_name|last_name|             address|      city|state|zipcode|phone_number|            created|           modified|\n+--------+-------------------+-------------------+----------+---------+--------------------+----------+-----+-------+------------+-------------------+-------------------+\n|      17|2008-12-27 23:31:40|               null|      Lucy|   Corley|   4834 Brown Street|Santa Rosa|   CA|  94980|  7076068290|2014-03-18 13:29:47|2014-03-18 13:29:47|\n|    1762|2009-03-19 23:43:00|               null|      Lucy|    Davis|2195 Riverside Drive|Sacramento|   CA|  95620|  9169959437|2014-03-18 13:29:50|2014-03-18 13:29:50|\n|    6551|2010-09-04 19:28:22|2014-02-14 19:19:16|      Lucy|  Casiano|2821 Wood Duck Drive|  Alhambra|   CA|  91810|  6261078791|2014-03-18 13:29:59|2014-03-18 13:29:59|\n|    6978|2010-09-22 07:13:16|               null|      Lucy|      Lee|4781 Shadowmar Drive|   Salinas|   CA|  93961|  8315367970|2014-03-18 13:30:00|2014-03-18 13:30:00|\n|    7107|2010-02-10 00:23:38|2014-01-23 22:55:06|      Lucy| Hastings|   4759 Gateway Road|    Fresno|   CA|  93692|  5595001084|2014-03-18 13:30:00|2014-03-18 13:30:00|\n+--------+-------------------+-------------------+----------+---------+--------------------+----------+-----+-------+------------+-------------------+-------------------+\nonly showing top 5 rows"}]},"apps":[],"jobName":"paragraph_1617123762663_849448996","id":"20200112-150715_766693464","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:37:57-0700","dateFinished":"2021-03-30T13:37:58-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459097"},{"text":"%md\nColumn expressions do not need to be assigned to a variable. They can be written within a function.\n`accountsDF.first_name == 'Lucy'`\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Column expressions do not need to be assigned to a variable. They can be written within a function.\n<br  /><code>accountsDF.first_name == 'Lucy'</code></p>\n"}]},"apps":[],"jobName":"paragraph_1617123762663_-1839785650","id":"20210121-145450_2047478406","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459098"},{"text":"%md\n### Functions within Statements","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Functions within Statements</h3>\n"}]},"apps":[],"jobName":"paragraph_1617123762664_218417384","id":"20210203-023426_267519317","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459099"},{"title":"8 - Select the city and state columns and the first three characters of the phone number column","text":"%pyspark\n\nsc.setJobGroup(\"DataFrame Queries\",\"Select the city and state columns and the first three characters of the phone number column\")\naccountsDF.select(\"city\", \"state\", accountsDF.phone_number.substr(1,3)).show(5)","user":"anonymous","dateUpdated":"2021-03-30T13:53:05-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"city":"string","state":"string","substring(phone_number, 1, 3)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+-----+-----------------------------+\n|         city|state|substring(phone_number, 1, 3)|\n+-------------+-----+-----------------------------+\n|      Oakland|   CA|                          510|\n|San Francisco|   CA|                          415|\n|    San Mateo|   CA|                          650|\n|    San Mateo|   CA|                          650|\n|     Richmond|   CA|                          510|\n+-------------+-----+-----------------------------+\nonly showing top 5 rows"}]},"apps":[],"jobName":"paragraph_1617123762664_-1018785364","id":"20200112-151240_768748553","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:53:06-0700","dateFinished":"2021-03-30T13:53:07-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459100"},{"text":"%md\nColumn expressions are not limited to where operations like those above. They can be used in any transformation for which a simple column could be used, such \nas a select. Try selecting the city and state columns, and the first three characters of the phone_number column (in the U.S., the first three digits of a \nphone number are known as the area code).\n\nUse the `select` function to select columns for city, state, and phone number.\n\nUse the `substr` operator on the phone_number column to extract the area code.\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Column expressions are not limited to where operations like those above. They can be used in any transformation for which a simple column could be used, such\n<br  />as a select. Try selecting the city and state columns, and the first three characters of the phone_number column (in the U.S., the first three digits of a\n<br  />phone number are known as the area code).</p>\n<p>Use the <code>select</code> function to select columns for city, state, and phone number.</p>\n<p>Use the <code>substr</code> operator on the phone_number column to extract the area code.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762664_1937488242","id":"20210121-145705_956448325","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459101"},{"title":"9 - Repeat the same query, using the alias operator to rename that column as area_code","text":"%pyspark\n\nsc.setJobGroup(\"DataFrame Queries\",\"Repeat the same query, using the alias operator to rename that column as area_code\")\naccountsDF.select(\"city\", \"state\", accountsDF.phone_number.substr(1,3).alias(\"area_code\")).show(5)","user":"anonymous","dateUpdated":"2021-03-30T13:54:23-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"city":"string","state":"string","area_code":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+-----+---------+\n|         city|state|area_code|\n+-------------+-----+---------+\n|      Oakland|   CA|      510|\n|San Francisco|   CA|      415|\n|    San Mateo|   CA|      650|\n|    San Mateo|   CA|      650|\n|     Richmond|   CA|      510|\n+-------------+-----+---------+\nonly showing top 5 rows"}]},"apps":[],"jobName":"paragraph_1617123762664_1204899036","id":"20200112-151632_64424046","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:54:23-0700","dateFinished":"2021-03-30T13:54:25-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459102"},{"text":"%md\n#### Using column alias\nNotice that in the last step, the values returned by the query were correct, but the column name was `substring(phone_number, 1, 3)`, which is long and hard \nto work with. \n\nUse the `alias` operator to rename the column `area_code`.\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Using column alias</h4>\n<p>Notice that in the last step, the values returned by the query were correct, but the column name was <code>substring(phone_number, 1, 3)</code>, which is long and hard\n<br  />to work with.</p>\n<p>Use the <code>alias</code> operator to rename the column <code>area_code</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762665_1438767301","id":"20210121-145912_643742369","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459103"},{"title":"10 - Perform a query with just first_name and last_name columns, and only includes users whose first and last names both begin with the same two letters","text":"%pyspark\n\nsc.setJobGroup(\"DataFrame Queries\",\"Perform a query with just first_name and last_name columns, and only includes users whose first and last names both begin with the same two letters\")\naccountsDF.select(\"first_name\",\"last_name\").where(accountsDF.first_name.substr(1,2) == accountsDF.last_name.substr(1,2)).show(5)","user":"anonymous","dateUpdated":"2021-03-30T13:57:43-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"first_name":"string","last_name":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+---------+\n|first_name|last_name|\n+----------+---------+\n|   Johnnie|    Jones|\n|    Robert|   Roller|\n|   Michael|  Minnick|\n| Rosemarie|Robertson|\n|     Keith|   Kemble|\n+----------+---------+\nonly showing top 5 rows"}]},"apps":[],"jobName":"paragraph_1617123762665_-1917509497","id":"20200112-152226_1854965189","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:57:43-0700","dateFinished":"2021-03-30T13:57:44-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459104"},{"text":"%md\nPerform a query that results in a DataFrame with just first_name and last_name columns, and only includes users whose first and last names both begin with \nthe same two letters. (For example, the user Roberta Roget would be included, because both her first and last names begin with “Ro”.)","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Perform a query that results in a DataFrame with just first_name and last_name columns, and only includes users whose first and last names both begin with\n<br  />the same two letters. (For example, the user Roberta Roget would be included, because both her first and last names begin with “Ro”.)</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762665_604901263","id":"20210121-150115_1198995278","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459105"},{"text":"%md\n### Aggregating Data","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Aggregating Data</h3>\n"}]},"apps":[],"jobName":"paragraph_1617123762666_69238727","id":"20210123-124548_207412224","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459106"},{"title":"11 - Query the accountsDF DataFrame using groupBy with count","text":"%pyspark\n\nsc.setJobGroup(\"DataFrame Queries\",\"Query the accountsDF DataFrame using groupBy with count\")\naccountsDF.groupBy(\"last_name\").count().show(10)","user":"anonymous","dateUpdated":"2021-03-30T13:58:37-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"last_name":"string","count":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"last_name","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"count","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+-----+\n|last_name|count|\n+---------+-----+\n| Francois|    6|\n|   Bohner|    3|\n|    Tyler|   50|\n|   Maddox|   60|\n| Abramson|    3|\n|  Custard|    3|\n| Striplin|    3|\n|    Bunch|   20|\n|    Roach|   35|\n|    Veith|    3|\n+---------+-----+\nonly showing top 10 rows"}]},"apps":[],"jobName":"paragraph_1617123762666_1931374915","id":"20200112-152830_1772531488","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:58:37-0700","dateFinished":"2021-03-30T13:58:39-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459107"},{"text":"%md\n#### Aggregating data\nQuery the accountsDF DataFrame using `groupBy` with `count` to find out the total number people sharing each last name. (Note that the count aggregation \ntransformation returns a DataFrame, unlike the count DataFrame action, which returns a single value to the driver.)","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Aggregating data</h4>\n<p>Query the accountsDF DataFrame using <code>groupBy</code> with <code>count</code> to find out the total number people sharing each last name. (Note that the count aggregation\n<br  />transformation returns a DataFrame, unlike the count DataFrame action, which returns a single value to the driver.)</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762666_-2047546005","id":"20210121-150255_1745187974","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459108"},{"title":"12 - Query accountsDF again, this time counting the number of people who share the same last and first name","text":"%pyspark\n\nsc.setJobGroup(\"DataFrame Queries\",\"Query accountsDF again, this time counting the number of people who share the same last and first name\")\naccountsDF.groupBy(\"last_name\",\"first_name\").count().show(10)","user":"anonymous","dateUpdated":"2021-03-30T13:59:52-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"last_name":"string","first_name":"string","count":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+----------+-----+\n|last_name|first_name|count|\n+---------+----------+-----+\n| Williams|   Lillian|    6|\n|Robertson| Rosemarie|    3|\n|     Bell|    Joanna|    3|\n|    Spano|    Amanda|    3|\n|    Beane|     Marie|    3|\n| Matthews|     Linda|    3|\n| Flanagan|   William|    3|\n|    Cobbs|     James|    3|\n|   Parker|      Emma|    3|\n|  Cashman|  Lawrence|    3|\n+---------+----------+-----+\nonly showing top 10 rows"}]},"apps":[],"jobName":"paragraph_1617123762667_-787249064","id":"20200112-153408_855238257","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T13:59:52-0700","dateFinished":"2021-03-30T13:59:54-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459109"},{"text":"%md\nYou can also group by multiple columns. Group by `last_name` and `first_name`.\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>You can also group by multiple columns. Group by <code>last_name</code> and <code>first_name</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762667_-1873335903","id":"20210121-150457_2104180875","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459110"},{"text":"%md\n### Join Account Data with Cellular Towers by Zip Code\n\nJoin the accounts data that you have been using with data about cell tower base station locations, which is in the base_stations.parquet file. \n\nStart by reviewing the schema and a few records of the data using the `parquet-tools` command.\n\n\n```shell\nparquet-tools schema data/base_stations.parquet\nparquet-tools head data/base_stations.parquet\n```\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Join Account Data with Cellular Towers by Zip Code</h3>\n<p>Join the accounts data that you have been using with data about cell tower base station locations, which is in the base_stations.parquet file.</p>\n<p>Start by reviewing the schema and a few records of the data using the <code>parquet-tools</code> command.</p>\n<pre><code class=\"shell\">parquet-tools schema data/base_stations.parquet\nparquet-tools head data/base_stations.parquet\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1617123762667_-645978093","id":"20210121-150641_263121069","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459111"},{"title":"13 - Review the schema and a few records of the data using the parquet-tools command","text":"%sh\n\nparquet-tools schema /home/training/training_materials/devsh/data/base_stations.parquet\nparquet-tools head /home/training/training_materials/devsh/data/base_stations.parquet","user":"anonymous","dateUpdated":"2021-03-30T14:01:27-0700","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0\nmessage spark_schema {\n  optional int32 id;\n  optional binary zip (STRING);\n  optional binary city (STRING);\n  optional binary state (STRING);\n  optional double lat;\n  optional double lon;\n}\n\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0\nid = 1\nzip = 86502\ncity = Chambers\nstate = AZ\nlat = 35.2375\nlon = -109.523\n\nid = 2\nzip = 86514\ncity = Teec Nos Pos\nstate = AZ\nlat = 36.7797\nlon = -109.359\n\nid = 3\nzip = 85602\ncity = Benson\nstate = AZ\nlat = 31.9883\nlon = -110.2941\n\nid = 4\nzip = 86011\ncity = Flagstaff\nstate = AZ\nlat = 35.6308\nlon = -112.0524\n\nid = 5\nzip = 86016\ncity = Gray Mountain\nstate = AZ\nlat = 35.6308\nlon = -112.0524\n\n"}]},"apps":[],"jobName":"paragraph_1617123762668_-1889672305","id":"20200112-154816_141130711","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T14:01:27-0700","dateFinished":"2021-03-30T14:01:29-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459112"},{"title":"14 - Upload the base_stations.parquet file to /devsh_loudacre","text":"%sh\n\nhdfs dfs -rm -r -skipTrash /devsh_loudacre/base_stations.parquet\nhdfs dfs -put /home/training/training_materials/devsh/data/base_stations.parquet /devsh_loudacre","user":"anonymous","dateUpdated":"2021-03-30T14:02:30-0700","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"rm: `/devsh_loudacre/base_stations.parquet': No such file or directory\n"}]},"apps":[],"jobName":"paragraph_1617123762668_-1133480733","id":"20200112-155140_1898004953","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T14:02:31-0700","dateFinished":"2021-03-30T14:02:34-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459113"},{"title":"15 - Create a new DataFrame called baseDF using the base stations data","text":"%pyspark\n\nsc.setJobGroup(\"DataFrame Queries\",\"Read the base_stations.parquet file\")\nbaseDF = spark.read.parquet(\"/devsh_loudacre/base_stations.parquet\")\n\nsc.setJobGroup(\"DataFrame Queries\",\"Show the baseDF DataFrame\")\nbaseDF.show(5)\nbaseDF.count()","user":"anonymous","dateUpdated":"2021-03-30T14:03:23-0700","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"id":"string","zip":"string","city":"string","state":"string","lat":"string","lon":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-----+-------------+-----+-------+---------+\n| id|  zip|         city|state|    lat|      lon|\n+---+-----+-------------+-----+-------+---------+\n|  1|86502|     Chambers|   AZ|35.2375| -109.523|\n|  2|86514| Teec Nos Pos|   AZ|36.7797| -109.359|\n|  3|85602|       Benson|   AZ|31.9883|-110.2941|\n|  4|86011|    Flagstaff|   AZ|35.6308|-112.0524|\n|  5|86016|Gray Mountain|   AZ|35.6308|-112.0524|\n+---+-----+-------------+-----+-------+---------+\nonly showing top 5 rows\n\n377"}]},"apps":[],"jobName":"paragraph_1617123762668_-1487467593","id":"20200112-155746_1774759971","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T14:03:24-0700","dateFinished":"2021-03-30T14:03:26-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459114"},{"text":"%md\nCreate a new DataFrame called baseDF reading the data from the base stations. Display the baseDF schema and data to compare it to the data in the \nParquet file.\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Create a new DataFrame called baseDF reading the data from the base stations. Display the baseDF schema and data to compare it to the data in the\n<br  />Parquet file.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762668_-1595218964","id":"20210121-150918_631160064","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459115"},{"title":"16 - Join baseDF and accountsDF to find users that live close to a base station","text":"%pyspark\n\nsc.setJobGroup(\"DataFrame Queries\",\"Join baseDF and accountsDF to find users that live close to a base station\")\n#accountsDF.printSchema()\n#baseDF.printSchema()\n\n#accountsDF.join(baseDF, baseDF.zip == accountsDF.zipcode).select(\"acct_num\",\"first_name\",\"last_name\",\"accounts.city\",\"accounts.state\",\"zipcode\",\"lat\",\"lon\").show(5)\n\njoinAccountsDF = accountsDF.join(baseDF, baseDF.zip == accountsDF.zipcode)\nselectJoinAccountsDF = joinAccountsDF.select(\"acct_num\",\"first_name\",\"last_name\",baseDF.city,\"accounts.state\",\"zipcode\",\"lat\",\"lon\")\nselectJoinAccountsDF.show(4)\n","user":"anonymous","dateUpdated":"2021-03-30T15:09:06-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"acct_num":"string","first_name":"string","last_name":"string","zipcode":"string","id":"string","zip":"string","city":"string","state":"string","lat":"string","lon":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+----------+-----------+----------+-----+-------+-------+---------+\n|acct_num|first_name|  last_name|      city|state|zipcode|    lat|      lon|\n+--------+----------+-----------+----------+-----+-------+-------+---------+\n|      37|    Cheryl|       West|   Oakland|   CA|  94622| 37.799|-122.2337|\n|      56|   Terrell|   Hardiman|Sacramento|   CA|  94261|38.3774|-121.4444|\n|      60|     Irwin|Clatterbuck| San Mateo|   CA|  94403|37.5395|-122.2998|\n|      68|    Walter|    Greiner|  Berkeley|   CA|  94701|37.8606|-122.2967|\n+--------+----------+-----------+----------+-----+-------+-------+---------+\nonly showing top 4 rows"}]},"apps":[],"jobName":"paragraph_1617123762669_-1181209927","id":"20200112-160544_1190452153","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T15:05:57-0700","dateFinished":"2021-03-30T15:05:58-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459116"},{"text":"%md\nSome account holders live in zip codes that have a base station. Join `baseDF` and `accountsDF` to find those users. For each of those users, include \ntheir `account ID`, `first name`, `last name`, and the `ID` and `location` data (latitude and longitude) for the base station in their zip code.\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Some account holders live in zip codes that have a base station. Join <code>baseDF</code> and <code>accountsDF</code> to find those users. For each of those users, include\n<br  />their <code>account ID</code>, <code>first name</code>, <code>last name</code>, and the <code>ID</code> and <code>location</code> data (latitude and longitude) for the base station in their zip code.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762669_1997332511","id":"20210121-151152_1476818975","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459117"},{"title":"17 - Upload the accountdevice directory in /devsh_loudacre/","text":"%sh\n\nhdfs dfs -rm -r -skipTrash /devsh_loudacre/accountdevice\nhdfs dfs -put /home/training/training_materials/devsh/data/accountdevice /devsh_loudacre","user":"anonymous","dateUpdated":"2021-03-30T14:13:13-0700","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"rm: `/devsh_loudacre/accountdevice': No such file or directory\n"}]},"apps":[],"jobName":"paragraph_1617123762669_1699452306","id":"20200112-161833_1780105065","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T14:13:13-0700","dateFinished":"2021-03-30T14:13:17-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459118"},{"text":"%md\n### Count Active Devices\n\nThe accountdevice CSV dataset contains a list of all the devices used by all accounts. Each row in the data set includes a `row ID`, an `account ID`, an `ID` \nfor the type of device, the `date` the device was activated for the account, and the specific `device ID`. \n\nThe CSV data file is in the `/home/training/training_materials/devsh/data/accountdevice` directory. Review the data in the data set, then upload the directory \nand its contents to the HDFS directory `/devsh_loudacre/accountdevice`.\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Count Active Devices</h3>\n<p>The accountdevice CSV dataset contains a list of all the devices used by all accounts. Each row in the data set includes a <code>row ID</code>, an <code>account ID</code>, an <code>ID</code>\n<br  />for the type of device, the <code>date</code> the device was activated for the account, and the specific <code>device ID</code>.</p>\n<p>The CSV data file is in the <code>/home/training/training_materials/devsh/data/accountdevice</code> directory. Review the data in the data set, then upload the directory\n<br  />and its contents to the HDFS directory <code>/devsh_loudacre/accountdevice</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762670_1142826012","id":"20210121-151350_1681857651","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459119"},{"title":"18 - Create a DataFrame from the account device data","text":"%pyspark\n\nsc.setJobGroup(\"DataFrame Queries\",\"Read the account device data\")\naccountDeviceDF = spark.read.option(\"header\",\"true\").option(\"inferSchema\",\"true\").csv(\"/devsh_loudacre/accountdevice\")","user":"anonymous","dateUpdated":"2021-03-30T14:14:31-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1617123762670_1936004980","id":"20200112-162339_1419543639","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T14:14:31-0700","dateFinished":"2021-03-30T14:14:34-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459120"},{"text":"%md\nCreate a dataframe `accountDeviceDF` using the option to include the header and to infer the schema.\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Create a dataframe <code>accountDeviceDF</code> using the option to include the header and to infer the schema.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762670_-1472699303","id":"20210121-151838_1962634110","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459121"},{"title":"19 - Find the total number of each device across all active accounts","text":"%pyspark\n\n# Create a DataFrame with only active accounts\nactiveAccountsDF = accountsDF.where(accountsDF.acct_close_dt.isNull())\n\n# Create a DataFrame with a device model IDs for only devices used by active accounts\nactiveAcctDevsDF =  activeAccountsDF.join(accountDeviceDF,activeAccountsDF.acct_num == accountDeviceDF.account_id).select(\"device_id\")\n\n# Sum up the total number of each device model \nsumDevicesDF = activeAcctDevsDF.groupBy(\"device_id\").count().withColumnRenamed(\"count\",\"active_num\")\n\n# Order by count in descending order\norderDevicesDF = sumDevicesDF.orderBy(sumDevicesDF.active_num.desc())\n\n# create a DataFrame based on the devices.json file\nsc.setJobGroup(\"DataFrame Queries\",\"Read the devices.json file\")\ndevDF = spark.read.json(\"/devsh_loudacre/devices.json\")\n\n# Join the list of device model totals with the list of devices\n# to get the make and model for each device\njoinDevicesDF = orderDevicesDF.join(devDF,sumDevicesDF.device_id == devDF.devnum)\n\n# Write out the data with the correct columns\n# Use overwrite mode so solution can be run multiple times\n\nsc.setJobGroup(\"DataFrame Queries\",\"Find the total number of each device across all active accounts\")\njoinDevicesDF.select(\"device_id\",\"make\",\"model\",joinDevicesDF.active_num).show()\n\nsc.setJobGroup(\"DataFrame Queries\",\"Save the result to a top-devices folder\")\njoinDevicesDF.select(\"device_id\",\"make\",\"model\",joinDevicesDF.active_num).write.mode(\"overwrite\").save(\"/devsh_loudacre/top_devices\")\n","user":"anonymous","dateUpdated":"2021-03-30T14:32:29-0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"device_id":"string","make":"string","model":"string","active_num":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+--------+--------------+----------+\n|device_id|    make|         model|active_num|\n+---------+--------+--------------+----------+\n|       29|Sorrento|          F41L|     30901|\n|       38| Titanic|          1100|      3727|\n|        9| Titanic|          1000|      3644|\n|        5|  iFruit|             1|      3643|\n|        1|Sorrento|          F00L|      3620|\n|       10|  MeeToo|           1.0|      3547|\n|       43|Sorrento|          F01L|      3424|\n|       34| Titanic|          2000|      3257|\n|       27|Sorrento|          F10L|      3245|\n|        2| Titanic|          2100|      3087|\n|       14| Titanic|          2200|      3066|\n|       33|  MeeToo|           2.0|      3033|\n|        7|  iFruit|             2|      2973|\n|       15|   Ronin|Novelty Note 1|      2972|\n|       44|Sorrento|          F11L|      2968|\n|       47|   Ronin|            S1|      2963|\n|       23|Sorrento|          F20L|      2718|\n|       11|Sorrento|          F21L|      2691|\n|       21| Titanic|          2300|      2670|\n|        3|  MeeToo|           3.0|      2622|\n+---------+--------+--------------+----------+\nonly showing top 20 rows"}]},"apps":[],"jobName":"paragraph_1617123762671_-675167287","id":"20200112-165123_336323532","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-30T14:32:29-0700","dateFinished":"2021-03-30T14:32:43-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459122"},{"text":"%md\nUse the account device data and the DataFrames you created previously in this exercise to find the total number of each device model across all active \naccounts— that is, accounts that have not been closed. \n\nThe new DataFrame should be sorted from most to least common model. \n\nSave the data as Parquet files in a directory called /devsh_loudacre/top_devices with the following columns:\n```code\n| Column Name    | Description                                                                                    |    Example      |\n| -------------- |------------------------------------------------------------------------------------------------| ----------------|\n| device_id      | The ID number of each known device (including those that might not be in use by any account)   |              18 |\n| make           | The manufacturer name for the device                                                           |           Ronin |\n| model          | The model name for the device                                                                  |  Novelty Note 2 |\n| active_num     | The total number of the model used by active accounts                                          |            2092 |\n```\n\nHints:\n\n* Active accounts are those with a null value for acct_close_dt (account close date) in the accounts table.\n* The account_id column in the device accounts data corresponds to the acct_num column in accounts table.\n* The device_id column in the device accounts data corresponds to the devnum column in the list of known devices in the /devsh_loudacre/devices.json file.\n* When you count devices, use withColumnRenamed to rename the count column to active_num. (The count column name is ambiguous because \n  it is both a function and a column.)\n* The query to complete this exercise is somewhat complicated and includes a sequence of many transformations. You may wish to assign variables to \n  the intermediate DataFrames resulting from the transformations that make up the query to make the code easier to work with and debug.\n\n\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Use the account device data and the DataFrames you created previously in this exercise to find the total number of each device model across all active\n<br  />accounts— that is, accounts that have not been closed.</p>\n<p>The new DataFrame should be sorted from most to least common model.</p>\n<p>Save the data as Parquet files in a directory called /devsh_loudacre/top_devices with the following columns:</p>\n<pre><code class=\"code\">| Column Name    | Description                                                                                    |    Example      |\n| -------------- |------------------------------------------------------------------------------------------------| ----------------|\n| device_id      | The ID number of each known device (including those that might not be in use by any account)   |              18 |\n| make           | The manufacturer name for the device                                                           |           Ronin |\n| model          | The model name for the device                                                                  |  Novelty Note 2 |\n| active_num     | The total number of the model used by active accounts                                          |            2092 |\n</code></pre>\n<p>Hints:</p>\n<ul>\n<li>Active accounts are those with a null value for acct_close_dt (account close date) in the accounts table.</li>\n<li>The account_id column in the device accounts data corresponds to the acct_num column in accounts table.</li>\n<li>The device_id column in the device accounts data corresponds to the devnum column in the list of known devices in the /devsh_loudacre/devices.json file.</li>\n<li>When you count devices, use withColumnRenamed to rename the count column to active_num. (The count column name is ambiguous because\n<br  />it is both a function and a column.)</li>\n<li>The query to complete this exercise is somewhat complicated and includes a sequence of many transformations. You may wish to assign variables to\n<br  />the intermediate DataFrames resulting from the transformations that make up the query to make the code easier to work with and debug.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1617123762671_784573634","id":"20210121-151708_768017486","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459123"},{"text":"%md\n#### Make Your Code Readable\nThis is an example of making your code readable. It is possible to put this functional program on a single line. The computer executor may love this, but \nyour colleagues will most certainly not. Be kind to those who must maintain your code, make it readable.\n\nAn example of this is creating DataFrame names that explain each tasks in the program. Read just the DataFrame names down the left hand side to see if this \nreadable.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Make Your Code Readable</h4>\n<p>This is an example of making your code readable. It is possible to put this functional program on a single line. The computer executor may love this, but\n<br  />your colleagues will most certainly not. Be kind to those who must maintain your code, make it readable.</p>\n<p>An example of this is creating DataFrame names that explain each tasks in the program. Read just the DataFrame names down the left hand side to see if this\n<br  />readable.</p>\n"}]},"apps":[],"jobName":"paragraph_1617123762672_-1774305105","id":"20210129-185505_622865953","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459124"},{"title":"20 - Review the exercise results","text":"%sh\n\n# Review exercise results\nrm -r /tmp/top_devices\nhdfs dfs -get /devsh_loudacre/top_devices /tmp/\n\nparquet-tools schema /tmp/top_devices\nparquet-tools head /tmp/top_devices\n","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"rm: cannot remove ‘/tmp/top_devices’: No such file or directory\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0\nmessage spark_schema {\n  optional int32 device_id;\n  optional binary make (STRING);\n  optional binary model (STRING);\n  required int64 active_num;\n}\n\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0\ndevice_id = 28\nmake = Titanic\nmodel = 4000\nactive_num = 1396\n\ndevice_id = 26\nmake = Sorrento\nmodel = F30L\nactive_num = 1560\n\ndevice_id = 44\nmake = Sorrento\nmodel = F11L\nactive_num = 2968\n\ndevice_id = 21\nmake = Titanic\nmodel = 2300\nactive_num = 2670\n\ndevice_id = 22\nmake = Sorrento\nmodel = F24L\nactive_num = 1874\n\n"}]},"apps":[],"jobName":"paragraph_1617123762672_383606908","id":"20210129-185832_663232447","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459125"},{"text":"%md\n# Tear Down\n---","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Tear Down</h1>\n<hr />\n"}]},"apps":[],"jobName":"paragraph_1617123762672_919453734","id":"20200830-135207_202010610","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459126"},{"title":"Delete the /tmp file","text":"%sh\n\nrm -r /tmp/top_devices\n","user":"anonymous","dateUpdated":"2021-03-31T06:30:40-0700","config":{"tableHide":false,"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"rm: cannot remove ‘/tmp/top_devices’: No such file or directory\n"},{"type":"TEXT","data":"ExitValue: 1"}]},"apps":[],"jobName":"paragraph_1617123762672_-2022126269","id":"20210203-022734_1247009934","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-31T06:30:40-0700","dateFinished":"2021-03-31T06:30:40-0700","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:459127"},{"title":"Delete HDFS files to prevent file exists errors","text":"%sh\n\nhdfs dfs -rm -r -f -skipTrash /devsh_loudacre/base_stations.parquet\n\n","user":"anonymous","dateUpdated":"2021-03-31T06:30:44-0700","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Deleted /devsh_loudacre/base_stations.parquet\n"}]},"apps":[],"jobName":"paragraph_1617123762673_438688084","id":"20210203-011410_893354615","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-31T06:30:44-0700","dateFinished":"2021-03-31T06:30:46-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459128"},{"title":"Delete the Livy session","text":"%sh\n\nsessionId=$(curl -s localhost:8998/sessions | jq '.sessions[0].id')\ncurl -s localhost:8998/sessions/$sessionId -X DELETE","user":"anonymous","dateUpdated":"2021-03-31T06:30:28-0700","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"{\"msg\":\"Session 'null' not found.\"}"}]},"apps":[],"jobName":"paragraph_1617123762673_388135021","id":"20200830-135250_2003268334","dateCreated":"2021-03-30T10:02:42-0700","dateStarted":"2021-03-31T06:30:29-0700","dateFinished":"2021-03-31T06:30:29-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:459129"},{"title":"Additional resources","text":"%md\nWe hope you've enjoyed this lab. Below are additional resources that you should find useful:\n\n1. [Cloudera Tutorials](http://cloudera.com/tutorials.html) are your natural next step where you can explore Spark in more depth.\n2. [Cloudera Community](https://community.cloudera.com) is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.\n3. [Apache Spark Documentation](https://spark.apache.org/documentation.html) - official Spark documentation.\n4. [Apache Zeppelin Project Home Page](https://zeppelin.apache.org) - official Zeppelin web site.","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":10,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We hope you've enjoyed this lab. Below are additional resources that you should find useful:</p>\n<ol>\n<li><a href=\"http://cloudera.com/tutorials.html\">Cloudera Tutorials</a> are your natural next step where you can explore Spark in more depth.</li>\n<li><a href=\"https://community.cloudera.com\">Cloudera Community</a> is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.</li>\n<li><a href=\"https://spark.apache.org/documentation.html\">Apache Spark Documentation</a> - official Spark documentation.</li>\n<li><a href=\"https://zeppelin.apache.org\">Apache Zeppelin Project Home Page</a> - official Zeppelin web site.</li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1617123762673_789788698","id":"20181116-135131_93712280","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459130"},{"text":"%angular\n</br>\n</br>\n</br>\n</br>\n<center>\n<a href=\"https://www.cloudera.com/about/training/courses.html\">\n  <img src=\"https://www.cloudera.com/content/dam/www/marketing/media-kit/logo-assets/cloudera_logo_darkorange.png\" alt=\"Cloudera University\" style=\"width:280px;height:40px;border:0;\" align=\"middle\">\n</a>\n</center>\n</br>\n</br>","user":"anonymous","dateUpdated":"2021-03-30T10:02:42-0700","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":2,"editorMode":"ace/mode/undefined","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"</br>\n</br>\n</br>\n</br>\n<center>\n<a href=\"https://www.cloudera.com/about/training/courses.html\">\n  <img src=\"https://www.cloudera.com/content/dam/www/marketing/media-kit/logo-assets/cloudera_logo_darkorange.png\" alt=\"Cloudera University\" style=\"width:280px;height:40px;border:0;\" align=\"middle\">\n</a>\n</center>\n</br>\n</br>"}]},"apps":[],"jobName":"paragraph_1617123762674_-1994713196","id":"20200110-154537_1406191376","dateCreated":"2021-03-30T10:02:42-0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459131"}],"name":"/DevSH/Pyspark/DataFrameAnalyzeData","id":"2G4W8KBC4","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"angular:shared_process":[],"sh:shared_process":[],"livy:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}