{"paragraphs":[{"text":" %md\n# About\n**Lab:** Analyzing Data with DataFrame Queries\n**Objective:** Analyze account data and mobile device data using DataFrame queries\n**File locations:**\n- Data files (local): \n    - /home/devuser/data/telco/accountdevice\n    - /home/devuser/data/telco/base_stations.parquet\n- Data files (HDFS): /user/zeppelin/devices.json\n- Hive Tables: telco.accounts\n\n**Successful outcome:** \n**Before you begin:** \n**Related lessons:** \n\n---","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>About</h1>\n<p><strong>Lab:</strong> Analyzing Data with DataFrame Queries\n<br  /><strong>Objective:</strong> Analyze account data and mobile device data using DataFrame queries\n<br  /><strong>File locations:</strong></p>\n<ul>\n<li>Data files (local):<ul>\n<li>$DEVDATA/accountdevice</li>\n<li>$DEVDATA/base_stations.parquet</li>\n</ul>\n</li>\n<li>Data files (HDFS): /devsh_loudacre/devices.json</li>\n<li>Hive Tables: devsh.accounts</li>\n</ul>\n<p><strong>Successful outcome:</strong>\n<br  /><strong>Before you begin:</strong>\n<br  /><strong>Related lessons:</strong></p>\n<hr />\n"}]},"apps":[],"jobName":"paragraph_1591291178567_926763844","id":"20181126-092644_1457476546","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:259585"},{"text":"%md\n# Setup","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Setup</h1>\n<p><strong>Important:</strong> This exercise depends on <strong><em> ***Insert previous exercise title here (with link?)*** </em></strong>. If you did not complete that exercise, run the course catch-up script and advance to the current exercise:</p>\n<pre><code>$ $DEVSH/scripts/catchup.sh\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1591291178568_-1312077968","id":"20181201-044336_178705192","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259586"},{"text":"%md\n# Lab\n","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Lab</h1>\n"}]},"apps":[],"jobName":"paragraph_1591291178569_-2102463015","id":"20181126-093358_358613711","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259587"},{"text":"%md\n### Query DataFrames Using Column Expressions","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Query DataFrames Using Column Expressions</h3>\n"}]},"apps":[],"jobName":"paragraph_1591291178570_-347048959","id":"20200428-000319_1418615856","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259588"},{"title":"1 - Review the API documentation for the Spark Column class","text":"%md\n*Optional:* Review the API docs for the `Column` class (which is in the Python module `pyspark.sql`). Take note of the various options available.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p><em>Optional:</em> Review the API docs for the <code>Column</code> class (which is in the Python module\n<br  /><code>pyspark.sql</code> and the Scala package <code>org.apache.spark.sql</code>). Take note of\n<br  />the various options available.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178570_-948367473","id":"20200424-212509_1688232409","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259589"},{"title":"2 - Create a new DataFrame called accountsDF","text":"%md\nCreate a new DataFrame called `accountsDF` based on the Hive `telco.accounts` table.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Create a new DataFrame called <code>accountsDF</code> based on the Hive <code>devsh.accounts</code> table.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178571_31793965","id":"20200424-212208_1992391573","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259590"},{"text":"%spark2\n","user":"sysadmin","dateUpdated":"2020-06-04T17:19:53+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178571_1013019060","id":"20200424-212305_1976759900","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259591"},{"title":"3 - Practice using both column reference syntaxes","text":"%md\nTry a simple query with `select`, using both column reference syntaxes.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Try a simple query with <code>select</code>, using both column reference syntaxes.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178572_1915018082","id":"20200424-212125_1404990380","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259592"},{"text":"%spark2\n// Syntax 1\naccountsDF.select(accountsDF(\"first_name\")).show\n\n// Syntax 2\naccountsDF.select($\"first_name\").show","user":"sysadmin","dateUpdated":"2020-06-04T17:20:41+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178573_1445002476","id":"20200424-212055_1017943498","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259593"},{"title":"4 - Create a column object","text":"%md\nTo explore column expressions, create a column object to work with, based on the `first_name` column in the `accountsDF` DataFrame.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>To explore column expressions, create a column object to work with, based on the\n<br  /><code>first_name</code> column in the <code>accountsDF</code> DataFrame.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178573_1250570771","id":"20200424-211342_2102011750","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259594"},{"text":"%spark2\nval fncol = accountsDF.first_name","user":"sysadmin","dateUpdated":"2020-06-04T17:20:50+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178574_-1632062650","id":"20200424-211535_1918581691","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259595"},{"title":"5 - View available methods and attributes of the Column class","text":"%md\nNote that the object type is `Column`. To see available methods and attributes, use tab completion--that is, enter `fnCol`. followed by `TAB`.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Note that the object type is <code>Column</code>. To see available methods and attributes, use\n<br  />tab completion&ndash;that is, enter <code>fnCol</code>. followed by <code>TAB</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178574_739905618","id":"20200424-211341_2090534806","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259596"},{"text":"%spark2\n","user":"sysadmin","dateUpdated":"2020-06-04T17:21:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178575_1570198219","id":"20200428-024431_1568395373","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259597"},{"title":"6 - Use a column expression to create a new column object","text":"%md\nNew `Column` objects are created when you perform operations on existing columns. Create a new `Column` object based on a column expression that identifies users whose first name is Lucy using the equality operator on the `fnCol` object you created above.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>New <code>Column</code> objects are created when you perform operations on existing\n<br  />columns. Create a new <code>Column</code> object based on a column expression that identifies\n<br  />users whose first name is Lucy using the equality operator on the <code>fnCol</code> object you\n<br  />created above.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178575_-1801269022","id":"20200424-211259_1439234654","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259598"},{"text":"%spark2\nval lucyCol = (fnCol === \"Lucy\")","user":"sysadmin","dateUpdated":"2020-06-04T17:21:55+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178576_1771292139","id":"20200424-211140_1331293844","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259599"},{"title":"7 - Use the lucyCol column expression in a select statement","text":"%md\nUse the `lucyCol` column expression in a `select` statement. Because `lucyCol` is based on a boolean expression, the column values will be `true` or `false` depending on the value of the `first_name` column. Confirm that users named Lucy are identified with the value `true`.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Use the <code>lucyCol</code> column expression in a <code>select</code> statement. Because <code>lucyCol</code>\n<br  />is based on a boolean expression, the column values will be <code>true</code> or <code>false</code>\n<br  />depending on the value of the <code>first_name</code> column. Confirm that users named\n<br  />Lucy are identified with the value <code>true</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178576_-1041908541","id":"20200424-211010_1767236609","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259600"},{"text":"%spark2\naccountsDF.\nselect($\"first_name\",$\"last_name\",lucyCol).show","user":"sysadmin","dateUpdated":"2020-06-04T17:22:04+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178577_-1220477222","id":"20200424-210944_441417371","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259601"},{"title":"8 - Use the where operation","text":"%md\nThe `where` operation requires a boolean-based column expression. Use the `lucyCol` column expression in a where transformation and view the data in the resulting DataFrame. Confirm that only users named Lucy are in the data.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The <code>where</code> operation requires a boolean-based column expression. Use the\n<br  /><code>lucyCol</code> column expression in a where transformation and view the data in the\n<br  />resulting DataFrame. Confirm that only users named Lucy are in the data.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178577_2092600287","id":"20200424-210842_326461687","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259602"},{"text":"%spark2\naccountsDF.where(lucyCol).show(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:22:13+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178578_-1513426939","id":"20200424-210819_197116283","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259603"},{"title":"9 - Try a query without assigning the result to a variable","text":"%md\nColumn expressions do not need to be assigned to a variable. Try the same query without using the `lucyCol` variable.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Column expressions do not need to be assigned to a variable. Try the same query\n<br  />without using the <code>lucyCol</code> variable.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178578_-1837113972","id":"20200424-210740_808874803","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259604"},{"text":"%spark2\naccountsDF.where(fnCol == \"Lucy\").show(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:22:26+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178579_-959344635","id":"20200424-210713_2131753087","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259605"},{"title":"10 - Column expressions can be used wherever a column could be used","text":"%md\nColumn expressions are not limited to where operations like those above. They can be used in any transformation for which a simple column could be used, such as a `select`. Try selecting the `city` and `state` columns, and the first three characters of the `phone_number` column (in the U.S., the first three digits of a phone number are known as the area code). Use the `substr` operator on the `phone_number` column to extract the area code.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Column expressions are not limited to where operations like those above. They can\n<br  />be used in any transformation for which a simple column could be used, such as a\n<br  /><code>select</code>. Try selecting the <code>city</code> and <code>state</code> columns, and the first three characters\n<br  />of the <code>phone_number</code> column (in the U.S., the first three digits of a phone number\n<br  />are known as the area code). Use the <code>substr</code> operator on the <code>phone_number</code>\n<br  />column to extract the area code.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178580_-498399307","id":"20200424-210538_1418669039","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259606"},{"text":"%spark2\naccountsDF.\nselect($\"city\", $\"state\", $\"phone_number\".substr(1,3)).\nshow(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:22:55+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178580_232584540","id":"20200424-210506_2050598948","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259607"},{"title":"11 - Use the alias operator to rename a column","text":"%md\nNotice that in the last step, the values returned by the query were correct, but the column name was `substring(phone_number, 1, 3)`, which is long and hard to work with. Repeat the same query, using the alias operator to rename that column as `area_code`.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Notice that in the last step, the values returned by the query were correct, but the\n<br  />column name was <code>substring(phone_number, 1, 3)</code>, which is long and\n<br  />hard to work with. Repeat the same query, using the alias operator to rename that\n<br  />column as <code>area_code</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178581_-1782656314","id":"20200424-205240_2041304491","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259608"},{"text":"%spark2\naccountsDF.\nselect($\"city\", $\"state\",\n$\"phone_number\".substr(1,3).alias(\"area_code\")).\nshow(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:23:05+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178581_1980617605","id":"20200424-205156_136439727","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259609"},{"title":"12 - Practice using transformations","text":"%md\nPerform a query that results in a DataFrame with just `first_name` and `last_name` columns, and only includes users whose first and last names both begin with the same two letters. (For example, the user Roberta Roget would be included, because both her first and last names begin with\"Ro\".)","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178582_299718687","id":"20200424-205004_811241468","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259610"},{"text":"%spark2\n","user":"sysadmin","dateUpdated":"2020-06-04T17:23:08+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178582_1447008744","id":"20200424-205103_2140068119","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259611"},{"text":"%md\n### Group and Count Data by Name","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Group and Count Data by Name</h3>\n"}]},"apps":[],"jobName":"paragraph_1591291178583_1749574656","id":"20200428-021130_74434274","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259612"},{"title":"13 - Query the DataFrame using groupBy with the count aggregation transformation","text":"%md\nQuery the `accountsDF` DataFrame using `groupBy` with count to find out the total number people sharing each last name. (Note that the count aggregation transformation returns a DataFrame, unlike the `count` DataFrame action, which returns a single value to the driver.)","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Query the <code>accountsDF</code> DataFrame using <code>groupBy</code> with count to find out the\n<br  />total number people sharing each last name. (Note that the count aggregation\n<br  />transformation returns a DataFrame, unlike the <code>count</code> DataFrame action, which\n<br  />returns a single value to the driver.)</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178583_-1039689402","id":"20200424-204838_1865108814","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259613"},{"text":"%spark2\naccountsDF.groupBy(\"last_name\").count().show(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:23:26+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178584_154897696","id":"20200424-204814_258444822","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259614"},{"title":"14 - Use groupBy on multiple columns","text":"%md\nYou can also group by multiple columns. Query `accountsDF` again, this time counting the number of people who share the same last and first name.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>You can also group by multiple columns. Query <code>accountsDF</code> again, this time\n<br  />counting the number of people who share the same last and first name.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178584_1593060272","id":"20200424-204728_710380328","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259615"},{"text":"%spark2\naccountsDF.\ngroupBy(\"last_name\",\"first_name\").count.show(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:23:35+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178585_-1931149493","id":"20200424-204702_186191411","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259616"},{"text":"%md\n### Join Account Data with Cellular Towers by Zip Code","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Join Account Data with Cellular Towers by Zip Code</h3>\n"}]},"apps":[],"jobName":"paragraph_1591291178585_710846741","id":"20200428-023308_165587244","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259617"},{"title":"15 - Review the base_stations.parquet file","text":"%md\nIn this section, you will join the accounts data that you have been using with data about cell tower base station locations, which is in the `base_stations.parquet` file. Start by reviewing the schema and a few records of the data. Use the `parquet-tools` command in a separate terminal window (not the one running the Spark shell).\n\n    $ parquet-tools schema /home/devuser/data/telco/base_stations.parquet\n    $ parquet-tools head /home/devuser/data/telco/base_stations.parquet","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In this section, you will join the accounts data that you have been using with data\n<br  />about cell tower base station locations, which is in the <code>base_stations.parquet</code>\n<br  />file. Start by reviewing the schema and a few records of the data. Use the\n<br  /><code>parquet-tools</code> command in a separate terminal window (not the one running\n<br  />the Spark shell).</p>\n<pre><code>$ parquet-tools schema $DEVDATA/base_stations.parquet\n$ parquet-tools head $DEVDATA/base_stations.parquet\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1591291178586_-1248798887","id":"20200424-204523_175092546","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259618"},{"title":"16 - Upload the data file to HDFS","text":"%sh\nhdfs dfs -put /home/devuser/data/telco/base_stations.parquet /user/zeppelin/","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<pre><code>$ hdfs dfs -put $DEVDATA/base_stations.parquet devsh_loudacre/\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1591291178587_932291834","id":"20200424-204412_257827029","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259619"},{"title":"17 - Create a new DataFrame using the base stations data","text":"%md\nIn your Spark shell, create a new DataFrame called `baseDF` using the base stations data. Review the `baseDF` schema and data to ensure it matches the data in the Parquet file.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In your Spark shell, create a new DataFrame called <code>baseDF</code> using the base stations\n<br  />data. Review the <code>baseDF</code> schema and data to ensure it matches the data in the\n<br  />Parquet file.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178587_1817501368","id":"20200424-204225_363142431","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259620"},{"text":"%spark2\n","user":"sysadmin","dateUpdated":"2020-06-04T17:23:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178588_-181587356","id":"20200428-024608_162427147","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259621"},{"title":"18 - Perform a join on baseDF and accountsDF","text":"%md\nSome account holders live in zip codes that have a base station. Join `baseDF` and `accountsDF` to find those users. For each of those users, include their account ID, first name, last name, and the ID and location data (latitude and longitude) for the base station in their zip code.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Some account holders live in zip codes that have a base station. Join <code>baseDF</code> and\n<br  /><code>accountsDF</code> to find those users. For each of those users, include their account ID,\n<br  />first name, last name, and the ID and location data (latitude and longitude) for the\n<br  />base station in their zip code.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178588_-964384194","id":"20200424-204225_1650611891","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259622"},{"text":"%spark2\naccountsDF.\nselect(\"acct_num\",\"first_name\",\"last_name\",\"zipcode\").\njoin(baseDF,$\"zip\" === $\"zipcode\").show()","user":"sysadmin","dateUpdated":"2020-06-04T17:23:55+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178589_844191200","id":"20200424-204205_958335764","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259623"},{"text":"%md\n### Count Active Devices","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Count Active Devices</h3>\n"}]},"apps":[],"jobName":"paragraph_1591291178589_1596943024","id":"20200428-023757_1155572954","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259624"},{"title":"19 - Review the account device data and upload it to HDFS","text":"%md\nThe `accountdevice` CSV dataset contains a list of all the devices used by all accounts. Each row in the data set includes a row ID, an account ID, an ID for the type of device, the date the device was activated for the account, and the specific device ID.\n\nThe CSV data file is in the `/home/devuser/data/telco/accountdevice` directory. Review the data in the data set, then upload the directory and its contents to the HDFS directory `/user/zeppelin/accountdevice`.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The <code>accountdevice</code> CSV dataset contains a list of all the devices used by all\n<br  />accounts. Each row in the data set includes a row ID, an account ID, an ID for the\n<br  />type of device, the date the device was activated for the account, and the specific\n<br  />device ID.</p>\n<p>The CSV data file is in the <code>$DEVDATA/accountdevice</code> directory. Review the data\n<br  />in the data set, then upload the directory and its contents to the HDFS directory\n<br  /><code>/devsh_loudacre/accountdevice</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178590_-1181704860","id":"20200424-203930_1058017229","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259625"},{"text":"%spark2\n","user":"sysadmin","dateUpdated":"2020-06-04T17:24:02+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178591_1723936196","id":"20200521-201713_1902770408","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259626"},{"title":"20 - Create a DataFrame based on the account device data","text":"%md\nCreate a DataFrame based on the `accountdevice` data files.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Create a DataFrame based on the <code>accountdevice</code> data files.</p>\n"}]},"apps":[],"jobName":"paragraph_1591291178591_1986756554","id":"20200424-203906_1000568790","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259627"},{"text":"%spark2\n","user":"sysadmin","dateUpdated":"2020-06-04T17:24:10+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178592_-1052283572","id":"20200428-024633_1113292222","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259628"},{"title":"21 - Analyze the data presented in this exercise","text":"%md\nUse the account device data and the DataFrames you created previously in this exercise to find the total number of each device model across all *active* accounts -- that is, accounts that have not been closed. The new DataFrame should be sorted from most to least common model. Save the data as Parquet files in a directory called `/user/zeppelin/top_devices` with the following columns:\n\n```\n| Column Name | Description                                                                                  | Example Value  |\n|-------------|----------------------------------------------------------------------------------------------|----------------|\n| device_id   | The ID number of each known device (including those that might not be in use by any account) | 18             |\n| make        | The manufacturer name for the device                                                         | Ronin          |\n| model       | The model name for the device                                                                | Novelty Note 2 |\n| active_num  | The total number of the model used by active accounts                                        | 2092           |\n```\n\nHints:\n- Active accounts are those with a null value for `acct_close_dt` (account close date) in the `accounts` table.\n- The `account_id` column in the device accounts data corresponds to the `acct_num` column in `accounts` table.\n- The `device_id` column in the device accounts data corresponds to the devnum column in the list of known devices in the `/devsh_loudacre/devices.json` file.\n- When you count devices, use `withColumnRenamed` to rename the count column to `active_num`. (The `count` column name is ambiguous because it is both a function and a column.)\n- The query to complete this exercise is somewhat complicated and includes a sequence of many transformations. You may wish to assign variables to the intermediate DataFrames resulting from the transformations that make up the query to make the code easier to work with and debug.","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Use the account device data and the DataFrames you created previously in this exercise to find the total number of each device model across all <em>active</em> accounts &ndash; that is, accounts that have not been closed. The new DataFrame should be sorted from most to least common model. Save the data as Parquet files in a directory called <code>/user/zeppelin/top_devices</code> with the following columns:</p>\n<pre><code>| Column Name | Description                                                                                  | Example Value  |\n|-------------|----------------------------------------------------------------------------------------------|----------------|\n| device_id   | The ID number of each known device (including those that might not be in use by any account) | 18             |\n| make        | The manufacturer name for the device                                                         | Ronin          |\n| model       | The model name for the device                                                                | Novelty Note 2 |\n| active_num  | The total number of the model used by active accounts                                        | 2092           |\n</code></pre>\n<p>Hints:</p>\n<ul>\n<li>Active accounts are those with a null value for <code>acct_close_dt</code> (account close date) in the <code>accounts</code> table.</li>\n<li>The <code>account_id</code> column in the device accounts data corresponds to the <code>acct_num</code> column in <code>accounts</code> table.</li>\n<li>The <code>device_id</code> column in the device accounts data corresponds to the devnum column in the list of known devices in the <code>/devsh_loudacre/devices.json</code> file.</li>\n<li>When you count devices, use <code>withColumnRenamed</code> to rename the count column to <code>active_num</code>. (The <code>count</code> column name is ambiguous because it is both a function and a column.)</li>\n<li>The query to complete this exercise is somewhat complicated and includes a sequence of many transformations. You may wish to assign variables to the intermediate DataFrames resulting from the transformations that make up the query to make the code easier to work with and debug.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1591291178592_-818232559","id":"20200424-202645_1446658215","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259629"},{"text":"%spark2\n","user":"sysadmin","dateUpdated":"2020-06-04T17:24:13+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178593_1735278115","id":"20200428-024202_845661804","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259630"},{"title":"Review the resulting file","text":"%sh\nhdfs dfs -get /user/zeppelin/top_devices /tmp/\n\nparquet-tools head /tmp/top_devices","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178593_-1916427900","id":"20200602-190907_1352716578","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259631"},{"text":"%md\n# Result\n**You have now:** \n\n---","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Result</h1>\n<p><strong>You have now:</strong></p>\n<hr />\n"}]},"apps":[],"jobName":"paragraph_1591291178594_-1637335043","id":"20181126-133507_1472573213","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259632"},{"text":"%md\n# Solution\n---","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Solution</h1>\n<hr />\n"}]},"apps":[],"jobName":"paragraph_1591291178594_-1341042504","id":"20181018-125200_1133281582","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259633"},{"text":"%md\n### Query DataFrames Using Column Expressions","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Query DataFrames Using Column Expressions</h3>\n"}]},"apps":[],"jobName":"paragraph_1591291178595_-475596825","id":"20200428-232253_1213291613","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259634"},{"title":"1 - Review the API documentation for the Spark Column class","text":"","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178595_-1933720598","id":"20200428-232312_1160155618","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259635"},{"title":"2 - Create a new DataFrame called accountsDF","text":"%spark2\nval accountsDF = spark.read.table(\"telco.accounts\")\naccountsDF.printSchema\naccountsDF.show","user":"sysadmin","dateUpdated":"2020-06-04T17:24:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178596_1906984754","id":"20200428-232339_1779103463","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259636"},{"title":"3 - Practice using both column reference syntaxes","text":"%spark2\n// Syntax 1\naccountsDF. select(accountsDF(\"first_name\")).show\n\n// Syntax 2\n//accountsDF.select($\"first_name\").show","user":"sysadmin","dateUpdated":"2020-06-04T17:25:23+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+\n|first_name|\n+----------+\n|    Donald|\n|     Donna|\n|    Dorthy|\n|     Leila|\n|     Anita|\n|    Stevie|\n|     David|\n|   Dorothy|\n|      Kara|\n|     Diane|\n|    Robert|\n|    Marcia|\n|    Andres|\n|       Ann|\n|    Joseph|\n|     Sarah|\n|      Lucy|\n|    Roland|\n|     Leona|\n|   Forrest|\n+----------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1591291178596_141189260","id":"20200428-232337_600421207","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259637"},{"title":"4 - Create a column object","text":"%spark2\nval fnCol = accountsDF.first_name","user":"sysadmin","dateUpdated":"2020-06-04T17:25:29+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1591291178597_1092241371","id":"20200428-232337_398231540","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259638"},{"title":"5 - View the available methods and attributes of the Column class","text":"%spark2\n//fnCol.","user":"sysadmin","dateUpdated":"2020-06-04T17:25:39+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178597_-25834501","id":"20200428-232336_2041671728","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259639"},{"title":"6 - Use a column expression to create a new column object","text":"%spark2\nval lucyCol = (fnCol == \"Lucy\")","user":"sysadmin","dateUpdated":"2020-06-04T17:25:50+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1591291178598_-66031266","id":"20200428-232336_254950066","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259640"},{"title":"7 - Use the lucyCol column expression in a select statement","text":"%spark2\naccountsDF.select($\"first_name\",$\"last_name\",lucyCol).show","user":"sysadmin","dateUpdated":"2020-06-04T17:26:29+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+---------+-------------------+\n|first_name|last_name|(first_name = Lucy)|\n+----------+---------+-------------------+\n|    Donald|   Becton|              false|\n|     Donna|    Jones|              false|\n|    Dorthy| Chalmers|              false|\n|     Leila|  Spencer|              false|\n|     Anita| Laughlin|              false|\n|    Stevie|   Bridge|              false|\n|     David|   Eggers|              false|\n|   Dorothy|  Koopman|              false|\n|      Kara|     Kohl|              false|\n|     Diane|   Nelson|              false|\n|    Robert|   Fisher|              false|\n|    Marcia|  Roberts|              false|\n|    Andres|    Cruse|              false|\n|       Ann|    Moore|              false|\n|    Joseph|   Lackey|              false|\n|     Sarah|   Duvall|              false|\n|      Lucy|   Corley|               true|\n|    Roland| Crawford|              false|\n|     Leona|     Bray|              false|\n|   Forrest|   Becker|              false|\n+----------+---------+-------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1591291178599_-2077915429","id":"20200428-232335_334373975","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259641"},{"title":"8 - Use the where operation","text":"%spark2\naccountsDF.where(lucyCol).show(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:26:40+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-------------------+-------------------+----------+---------+--------------------+----------+-----+-------+------------+-------------------+-------------------+\n|acct_num|     acct_create_dt|      acct_close_dt|first_name|last_name|             address|      city|state|zipcode|phone_number|            created|           modified|\n+--------+-------------------+-------------------+----------+---------+--------------------+----------+-----+-------+------------+-------------------+-------------------+\n|      17|2008-12-27 23:31:40|               null|      Lucy|   Corley|   4834 Brown Street|Santa Rosa|   CA|  94980|  7076068290|2014-03-18 13:29:47|2014-03-18 13:29:47|\n|    1762|2009-03-19 23:43:00|               null|      Lucy|    Davis|2195 Riverside Drive|Sacramento|   CA|  95620|  9169959437|2014-03-18 13:29:50|2014-03-18 13:29:50|\n|    6551|2010-09-04 19:28:22|2014-02-14 19:19:16|      Lucy|  Casiano|2821 Wood Duck Drive|  Alhambra|   CA|  91810|  6261078791|2014-03-18 13:29:59|2014-03-18 13:29:59|\n|    6978|2010-09-22 07:13:16|               null|      Lucy|      Lee|4781 Shadowmar Drive|   Salinas|   CA|  93961|  8315367970|2014-03-18 13:30:00|2014-03-18 13:30:00|\n|    7107|2010-02-10 00:23:38|2014-01-23 22:55:06|      Lucy| Hastings|   4759 Gateway Road|    Fresno|   CA|  93692|  5595001084|2014-03-18 13:30:00|2014-03-18 13:30:00|\n+--------+-------------------+-------------------+----------+---------+--------------------+----------+-----+-------+------------+-------------------+-------------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1591291178599_738493624","id":"20200428-232335_471510672","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259642"},{"title":"9 - Try a query without assigning the result to a variable","text":"%spark2\naccountsDF.where(fnCol == \"Lucy\").show(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:27:00+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-------------------+-------------------+----------+---------+--------------------+----------+-----+-------+------------+-------------------+-------------------+\n|acct_num|     acct_create_dt|      acct_close_dt|first_name|last_name|             address|      city|state|zipcode|phone_number|            created|           modified|\n+--------+-------------------+-------------------+----------+---------+--------------------+----------+-----+-------+------------+-------------------+-------------------+\n|      17|2008-12-27 23:31:40|               null|      Lucy|   Corley|   4834 Brown Street|Santa Rosa|   CA|  94980|  7076068290|2014-03-18 13:29:47|2014-03-18 13:29:47|\n|    1762|2009-03-19 23:43:00|               null|      Lucy|    Davis|2195 Riverside Drive|Sacramento|   CA|  95620|  9169959437|2014-03-18 13:29:50|2014-03-18 13:29:50|\n|    6551|2010-09-04 19:28:22|2014-02-14 19:19:16|      Lucy|  Casiano|2821 Wood Duck Drive|  Alhambra|   CA|  91810|  6261078791|2014-03-18 13:29:59|2014-03-18 13:29:59|\n|    6978|2010-09-22 07:13:16|               null|      Lucy|      Lee|4781 Shadowmar Drive|   Salinas|   CA|  93961|  8315367970|2014-03-18 13:30:00|2014-03-18 13:30:00|\n|    7107|2010-02-10 00:23:38|2014-01-23 22:55:06|      Lucy| Hastings|   4759 Gateway Road|    Fresno|   CA|  93692|  5595001084|2014-03-18 13:30:00|2014-03-18 13:30:00|\n+--------+-------------------+-------------------+----------+---------+--------------------+----------+-----+-------+------------+-------------------+-------------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1591291178600_1387859052","id":"20200428-232335_698368359","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259643"},{"title":"10 - Column expressions can be used wherever a column could be used","text":"%spark2\naccountsDF.select($\"city\", $\"state\",$\"phone_number\".substr(1,3)).show(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:27:06+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+-----+-----------------------------+\n|         city|state|substring(phone_number, 1, 3)|\n+-------------+-----+-----------------------------+\n|      Oakland|   CA|                          510|\n|San Francisco|   CA|                          415|\n|    San Mateo|   CA|                          650|\n|    San Mateo|   CA|                          650|\n|     Richmond|   CA|                          510|\n+-------------+-----+-----------------------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1591291178600_-177144682","id":"20200428-232335_1184100242","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259644"},{"title":"11 - Use the alias operator to rename a column","text":"%spark2\naccountsDF.select($\"city\", $\"state\",$\"phone_number\".substr(1,3).alias(\"area_code\")).show(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:27:13+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+-----+---------+\n|         city|state|area_code|\n+-------------+-----+---------+\n|      Oakland|   CA|      510|\n|San Francisco|   CA|      415|\n|    San Mateo|   CA|      650|\n|    San Mateo|   CA|      650|\n|     Richmond|   CA|      510|\n+-------------+-----+---------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1591291178601_-82307188","id":"20200428-232334_1233728225","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259645"},{"title":"12 - Practice using transformations","text":"%spark2\naccountsDF.where($\"first_name\".substr(1,2) === $\"last_name\".substr(1,2)).select(\"first_name\",\"last_name\").show(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:27:25+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+---------+\n|first_name|last_name|\n+----------+---------+\n|   Johnnie|    Jones|\n|    Robert|   Roller|\n|   Michael|  Minnick|\n| Rosemarie|Robertson|\n|     Keith|   Kemble|\n+----------+---------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1591291178601_-1086080523","id":"20200428-232334_1759454808","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259646"},{"text":"%md\n### Group and Count Data by Name","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Group and Count Data by Name</h3>\n"}]},"apps":[],"jobName":"paragraph_1591291178602_-1668250564","id":"20200428-232334_821188933","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259647"},{"title":"13 - Query the DataFrame using groupBy with the count aggregation transformation","text":"%spark2\naccountsDF.groupBy(\"last_name\").count.show(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:27:32+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+-----+\n|last_name|count|\n+---------+-----+\n|   Pinder|    8|\n|  Carlson|   75|\n|    Olson|   67|\n|  Rodgers|   41|\n| Ferguson|   83|\n+---------+-----+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1591291178603_-85460843","id":"20200428-232334_1509899401","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259648"},{"title":"14 - Use groupBy on multiple columns","text":"%spark2\naccountsDF.groupBy(\"last_name\",\"first_name\").count.show(5)","user":"sysadmin","dateUpdated":"2020-06-04T17:27:45+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+----------+-----+\n|last_name|first_name|count|\n+---------+----------+-----+\n|     Ruiz|     Duane|    2|\n|    Smith| Christina|    5|\n|    Smith|    Bobbie|    2|\n|    Jones|    Carole|    2|\n|     King|     Edgar|    2|\n+---------+----------+-----+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1591291178603_2010844314","id":"20200428-232334_896687392","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259649"},{"text":"%md\n### Join Account Data with Cellular Towers by Zip Code","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Join Account Data with Cellular Towers by Zip Code</h3>\n"}]},"apps":[],"jobName":"paragraph_1591291178604_-1894243815","id":"20200428-232334_931178343","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259650"},{"title":"15 - Review the base_stations.parquet file","text":"","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178604_459902456","id":"20200428-232334_1714620989","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259651"},{"title":"16 - Upload the data file to HDFS","text":"%sh\nhdfs dfs -put /home/devuser/data/telco/base_stations.parquet /user/zeppelin/","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1591291178605_-673180425","id":"20200428-232333_209687192","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259652"},{"title":"17 - Create a new DataFrame using the base stations data","text":"%spark2\nval baseDF = spark.read.parquet(\"/devsh_loudacre/base_stations.parquet\")","user":"sysadmin","dateUpdated":"2020-06-04T17:28:03+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1591291178605_-168785995","id":"20200428-232333_92654281","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259653"},{"title":"18 - Perform a join on baseDF and accountsDF","text":"%spark2\naccountsDF.select(\"acct_num\",\"first_name\",\"last_name\",\"zipcode\").join(baseDF, $\"zip\" === $\"zipcode\").show()","user":"sysadmin","dateUpdated":"2020-06-04T17:28:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+----------+-----------+-------+---+-----+-------------+-----+-------+---------+\n|acct_num|first_name|  last_name|zipcode| id|  zip|         city|state|    lat|      lon|\n+--------+----------+-----------+-------+---+-----+-------------+-----+-------+---------+\n|      37|    Cheryl|       West|  94622|231|94622|      Oakland|   CA| 37.799|-122.2337|\n|      56|   Terrell|   Hardiman|  94261|127|94261|   Sacramento|   CA|38.3774|-121.4444|\n|      60|     Irwin|Clatterbuck|  94403|185|94403|    San Mateo|   CA|37.5395|-122.2998|\n|      68|    Walter|    Greiner|  94701| 35|94701|     Berkeley|   CA|37.8606|-122.2967|\n|     126|     Keith|     Branan|  94623| 34|94623|      Oakland|   CA|37.6802|-121.9215|\n|     130|   Maynard|     Penley|  94120|165|94120|San Francisco|   CA|37.7848|-122.7278|\n|     179|     Julia|    Nowicki|  94059|182|94059| Redwood City|   CA|37.3811|-122.3348|\n|     183| Elizabeth|   McMillan|  94150|173|94150|San Francisco|   CA|37.7848|-122.7278|\n|     196|     Bruce|     Vargas|  94975|211|94975|     Petaluma|   CA|38.4631|  -122.99|\n|     233|     Arden|      Black|  94088|190|94088|    Sunnyvale|   CA|37.1894|-121.7053|\n|     241|    Conrad|  Fairchild|  94116|164|94116|San Francisco|   CA|37.7441|-122.4863|\n|     275|   Chelsea|      Gaona|  94040|189|94040|Mountain View|   CA|37.3855| -122.088|\n|     410|   Kenneth|    Nowicki|  94110|163|94110|San Francisco|   CA|37.7509|-122.4153|\n|     415|     Jason|       King|  94529| 39|94529|      Concord|   CA|37.7772|-121.9554|\n|     435|    Andrew|      Oakes|  94130|167|94130|San Francisco|   CA|37.8231|-122.3693|\n|     481|     Grace|     Brooks|  95675| 37|95675|  River Pines|   CA|38.5463| -120.743|\n|     489|    George|       Sams|  94088|190|94088|    Sunnyvale|   CA|37.1894|-121.7053|\n|     530|       Ann|   Stennett|  95190|202|95190|     San Jose|   CA|37.3894|-121.8868|\n|     543|      Joan|     Benito|  95915|121|95915|       Belden|   CA|39.9324|-121.3144|\n|     556|  Gretchen|    Akridge|  94074|184|94074| San Gregorio|   CA|37.3255|-122.3556|\n+--------+----------+-----------+-------+---+-----+-------------+-----+-------+---------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1591291178606_1456026413","id":"20200428-232333_123134156","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259654"},{"text":"%md\n### Count Active Devices","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Count Active Devices</h3>\n"}]},"apps":[],"jobName":"paragraph_1591291178607_-1117857916","id":"20200428-232333_439776920","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259655"},{"title":"19 - Review the account device data and upload it to HDFS","text":"%sh\nhdfs dfs -put /home/devuser/data/telco/accountdevice /user/zeppelin/accountdevice","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1591291178607_744963502","id":"20200428-232333_2145921133","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259656"},{"title":"20 - Create a DataFrame based on the account device data","text":"%spark2\nval accountDeviceDF = spark.read.option(\"header\",\"true\").option(\"inferSchema\",\"true\").csv(\"/devsh_loudacre/accountdevice\")","user":"sysadmin","dateUpdated":"2020-06-04T17:28:45+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1591291178608_861727874","id":"20200428-232333_1817940809","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259657"},{"title":"21 - Analyze the data presented in this exercise","text":"%spark2\n// Create a DataFrame with only active accounts\nval activeAccountsDF = accountsDF.where(accountsDF(\"acct_close_dt\").isNull)\n\n// Create a DataFrame with a device model IDs for only devices used by active accounts\nval activeAcctDevsDF =  activeAccountsDF.join(accountDeviceDF,activeAccountsDF(\"acct_num\") === accountDeviceDF(\"account_id\")).select(\"device_id\")\n\n// Sum up the total number of each device model \nval sumDevicesDF = activeAcctDevsDF.groupBy(\"device_id\").count().withColumnRenamed(\"count\",\"active_num\")\n\n// Order by count in descending order\nval orderDevicesDF = sumDevicesDF.orderBy($\"active_num\".desc)\n\n// create a DataFrame based on the devices.json file\nval devDF = spark.read.json(\"/devsh_loudacre/devices.json\")\n\n// Join the list of device model totals with the list of devices\n// to get the make and model for each device\nval joinDevicesDF = orderDevicesDF.join(devDF,orderDevicesDF(\"device_id\") === devDF(\"devnum\"))\n\n// Write out the data with the correct columns\n// use overwrite mode so solution can be run multiple times\njoinDevicesDF.select(\"device_id\",\"make\",\"model\",\"active_num\").write.mode(\"overwrite\").save(\"/user/zeppelin/top_devices\")\n// *** ^^^Should be saved as parquet !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!","user":"sysadmin","dateUpdated":"2020-06-04T17:30:26+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591291178608_694122254","id":"20200428-232327_1166252029","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259658"},{"title":"Review the resulting file","text":"%sh\nhdfs dfs -get /user/zeppelin/top_devices /tmp/\n\n# In a separate shell:\nparquet-tools head /tmp/top_devices","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"get: `/tmp/top_devices/_SUCCESS': File exists\n"},{"type":"TEXT","data":"ExitValue: 1"}]},"apps":[],"jobName":"paragraph_1591291178609_-1106191513","id":"20200428-232327_20671638","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259659"},{"text":"%md\nWe hope you've enjoyed this lab. Below are additional resources that you should find useful:\n\n1. [Hortonworks Apache Spark Tutorials](http://hortonworks.com/tutorials/#tuts-developers) are your natural next step where you can explore Spark in more depth.\n2. [Hortonworks Community Connection (HCC)](https://community.hortonworks.com/spaces/85/data-science.html?type=question) is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.\n3. [Hortonworks Apache Spark Docs](https://docs.hortonworks.com/HDPDocuments/HDP3/HDP-3.0.1/spark-overview/content/analyzing_data_with_apache_spark.html) - official Spark documentation.\n4. [Hortonworks Apache Zeppelin Docs](https://docs.hortonworks.com/HDPDocuments/HDP3/HDP-3.0.1/zeppelin-overview/content/overview.html) - official Zeppelin documentation.\n","user":"sysadmin","dateUpdated":"2020-06-04T17:19:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We hope you've enjoyed this lab. Below are additional resources that you should find useful:</p>\n<ol>\n<li><a href=\"http://hortonworks.com/tutorials/#tuts-developers\">Hortonworks Apache Spark Tutorials</a> are your natural next step where you can explore Spark in more depth.</li>\n<li><a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\">Hortonworks Community Connection (HCC)</a> is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.</li>\n<li><a href=\"https://docs.hortonworks.com/HDPDocuments/HDP3/HDP-3.0.1/spark-overview/content/analyzing_data_with_apache_spark.html\">Hortonworks Apache Spark Docs</a> - official Spark documentation.</li>\n<li><a href=\"https://docs.hortonworks.com/HDPDocuments/HDP3/HDP-3.0.1/zeppelin-overview/content/overview.html\">Hortonworks Apache Zeppelin Docs</a> - official Zeppelin documentation.</li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1591291178609_-1829672353","id":"20181126-133017_244739700","dateCreated":"2020-06-04T17:19:38+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259660"}],"name":"ScalaSpark/06-AnalyzingDatawithDataFrameQueries","id":"2FAUF3W83","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"sh:shared_process":[],"jdbc:shared_process":[],"spark2:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}