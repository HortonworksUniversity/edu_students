{"paragraphs":[{"text":"%md\n# About\n**Lab:** Implementing an Iterative Algorithm\n**Objective:** Practice implementing iterative algorithms in Spark by calculating k-means for a set of points.\n**File locations:**\n    Data files (HDFS): /user/zeppelin/devicestatus_etl/*\n    Stubs: /home/devuser/bin/devsh/exercises/iterative/KMeansCoords.scalaspark\n**Successful outcome:** \n**Before you begin:** \n**Related lessons:** \n\n---","user":"sysadmin","dateUpdated":"2020-06-04T23:17:12+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>About</h1>\n<p><strong>Lab:</strong> Implementing an Iterative Algorithm\n<br  /><strong>Objective:</strong> Practice implementing iterative algorithms in Spark by calculating k-means for a set of points.\n<br  /><strong>File locations:</strong></p>\n<pre><code>Data files (HDFS): /devsh_loudacre/devicestatus_etl/*\nStubs: KMeansCoords.pyspark\n       KMeansCoords.scalaspark\n</code></pre>\n<p><strong>Successful outcome:</strong>\n<br  /><strong>Before you begin:</strong>\n<br  /><strong>Related lessons:</strong></p>\n<hr />\n"}]},"apps":[],"jobName":"paragraph_1591312599981_1967710965","id":"20181126-092644_1457476546","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:29855"},{"text":"%md\n# Setup","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Setup</h1>\n<p><strong>Important:</strong> This exercise depends on <strong><em> ***Insert previous exercise title here (with link?)*** </em></strong>. If you did not complete that exercise, run the course catch-up script and advance to the current exercise:</p>\n<pre><code>$ $DEVSH/scripts/catchup.sh\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1591312599982_-1099714506","id":"20181201-044336_178705192","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29856"},{"text":"%md\n# Lab\n","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Lab</h1>\n"}]},"apps":[],"jobName":"paragraph_1591312599983_970042516","id":"20181126-093358_358613711","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29857"},{"text":"%md\n### Reviewing the Data","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Reviewing the Data</h3>\n"}]},"apps":[],"jobName":"paragraph_1591312599984_442481182","id":"20200426-063602_1083179522","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29858"},{"title":"1 - Ensure the environment is prepared for this exercise","text":"%md\nIf you completed the `Bonus Exercise 1: Clean Device Status Data` in exercise `08 - Transforming Data Using RDDs`, you used Spark to extract the date, maker, device ID, latitude and longitude from the devicestatus.txt data file, and store the results in the HDFS directory `/user/zeppelin/devicestatus_etl`.\n\n*If you did not complete that bonus exercise, use the commands below to check if the `devicestatus_etl` directory has data in it and upload the files to HDFS if needed.","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>If you completed the <a href=\"http://client02.cloudair.lan:9995/#/notebook/2F7MC7XGP\">Bonus Exercise 1: Clean Device Status Data</a> of <a href=\"http://client02.tantor.net:9995/#/notebook/2F7MC7XGP\">Hands-On Exercise: Transforming Data Using RDDs</a>, you used Spark to extract the date, maker, device ID, latitude and longitude from the devicestatus.txt data file, and store the results in the HDFS directory <code>/user/zeppelin/devicestatus_etl</code>.</p>\n<h3><strong><em> !!! Check this link !!! </em></strong></h3>\n<p>*If you did not complete that bonus exercise, upload the solution file to HDFS now.</p>\n"}]},"apps":[],"jobName":"paragraph_1591312599984_1521315415","id":"20200426-063615_1278580250","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29859"},{"text":"%sh\n# hdfs dfs -put /home/devuser/data/telco/static_data/devicestatus_etl /user/zeppelin/\nhdfs dfs -ls /user/zeppelin/devicestatus_etl/","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312599985_1361318968","id":"20200429-211927_1997313137","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29860"},{"title":"2 - Examine the data","text":"%md\nExamine the data in the dataset. Note that the latitude and longitude are the 4th and 5th fields, respectively, as shown in the sample data below:\n\n```\n2014-03-15:10:10:20,Sorrento,8cc3b47e-bd01-4482-b500-28f2342679af,\n33.6894754264,-117.543308253\n    \n2014-03-15:10:10:20,MeeToo,ef8c7564-0a1a-4650-a655-c8bbd5f8f943,\n37.4321088904,-121.485029632\n```","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<pre><code>    2014-03-15:10:10:20,Sorrento,8cc3b47e-bd01-4482-b500-28f2342679af,\n    33.6894754264,-117.543308253\n\n    2014-03-15:10:10:20,MeeToo,ef8c7564-0a1a-4650-a655-c8bbd5f8f943,\n    37.4321088904,-121.485029632\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1591312599986_-1470421810","id":"20200426-063613_1662082658","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29861"},{"text":"%sh\n","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312599986_1827516547","id":"20200602-221350_1293094781","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29862"},{"text":"%md\n### Calculating k-means for Device Location","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Calculating k-means for Device Location</h3>\n"}]},"apps":[],"jobName":"paragraph_1591312599987_-1521926870","id":"20200426-063612_1155120341","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29863"},{"title":"3 - Review the k-means code","text":"%md\nThe starter code defines convenience functions used in calculating k-means:\n\n- closestPoint: given a (latitude/longitude) point and an array of current center points, returns the index in the array of the center closest to the given point\n- addPoints: given two points, return a point which is the sum of the two points -- that is, (x1+x2, y1+y2)\n- distanceSquared: given two points, returns the squared distance of the two -- this is a common calculation required in graph analysis\n\nNote that the stub code sets the variable K equal to 5 -- this is the number of means to calculate.","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li>closestPoint: given a (latitude/longitude) point and an array of current\n<br  />center points, returns the index in the array of the center closest to the given\n<br  />point</li>\n<li>addPoints: given two points, return a point which is the sum of the two points &ndash;\n<br  />that is, (x1+x2, y1+y2)</li>\n<li>distanceSquared: given two points, returns the squared distance of the two &ndash;\n<br  />this is a common calculation required in graph analysis</li>\n</ul>\n<p>Note that the stub code sets the variable K equal to 5\u0014this is the number of\n<br  />means to calculate.</p>\n"}]},"apps":[],"jobName":"paragraph_1591312599988_211519808","id":"20200426-063612_75350428","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29864"},{"text":"%spark2\n// Find K Means of Loudacre device status locations\n// \n// Input data: file(s) with device status data (delimited by ',')\n// including latitude (4th field) and longitude (5th field) of device locations \n// (lat,lon of 0,0 indicates unknown location)\n\nimport scala.math.pow\n\n// The squared distances between two points\ndef distanceSquared(p1: (Double,Double), p2: (Double,Double)) = { \n  pow(p1._1 - p2._1,2) + pow(p1._2 - p2._2,2 )\n}\n\n// The sum of two points\ndef addPoints(p1: (Double,Double), p2: (Double,Double)) = {\n  (p1._1 + p2._1, p1._2 + p2._2)\n}\n\n// for a point p and an array of points, return the index in the array of the point closest to p\ndef closestPoint(p: (Double,Double), points: Array[(Double,Double)]): Int = {\n    var index = 0\n    var bestIndex = 0\n    var closest = Double.PositiveInfinity\n\n    for (i <- 0 until points.length) {\n      val dist = distanceSquared(p,points(i))\n      if (dist < closest) {\n        closest = dist\n        bestIndex = i\n      }\n    }\n    bestIndex\n}\n\n// The device status dataset\nval filename = \"/user/zeppelin/devicestatus_etl\"\n\n// K is the number of means (center points of clusters) to find\nval K = 5","user":"sysadmin","dateUpdated":"2020-06-04T23:22:04+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312599988_1792143473","id":"20200523-010453_177673404","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29865"},{"title":"4 - Familiarize yourself with the algorithm","text":"%md\nThe stub code also sets the variable `convergeDist`. This will be used to decide when the k-means calculation is done -- when the amount the locations of the means changes between iterations is less than `convergeDist`. A \"perfect\" solution would be 0; this number represents a \"good enough\" solution. For this exercise, use a value of 0.01.","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The stub code also sets the variable <code>convergeDist</code>. This will be used to decide when the k-means calculation is done &ndash; when the amount the locations of the means changes between iterations is less than <code>convergeDist</code>. A &ldquo;perfect&rdquo; solution would be 0; this number represents a &ldquo;good enough&rdquo; solution. For this exercise, use a value of 0.01.</p>\n"}]},"apps":[],"jobName":"paragraph_1591312599989_-1137910460","id":"20200426-063611_856963437","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29866"},{"text":"%spark2\n","user":"sysadmin","dateUpdated":"2020-06-04T23:22:26+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312599990_1949117300","id":"20200602-221845_205433178","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29867"},{"title":"5 - Parse the input file","text":"%md\nParse the input file -- which is delimited by commas -- into `(latitude,longitude)` pairs (the 4th and 5th fields in each line). Only include known locations -- that is, filter out `(0,0)` locations. Be sure to persist the resulting RDD because you will access it each time through the iteration.","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Parse the input file &ndash; which is delimited by commas &ndash; into <code>(latitude,longitude)</code> pairs (the 4th and 5th fields in each line). Only include known locations &ndash; that is, filter out <code>(0,0)</code> locations. Be sure to persist the resulting RDD because you will access it each time through the iteration.</p>\n"}]},"apps":[],"jobName":"paragraph_1591312599990_-1545290307","id":"20200426-063611_728977015","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29868"},{"text":"%spark2\n","user":"sysadmin","dateUpdated":"2020-06-04T23:22:32+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312599991_1927883875","id":"20200426-063610_1631138147","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29869"},{"title":"6 - Start the algorithm by sampling the data","text":"%md\nCreate a K-length array called `kPoints` by taking a random sample of K location points from the RDD as starting means (center points).\n\nFor example:\n```    \n    val kPoints = points.takeSample(false, K, 42)\n```","user":"sysadmin","dateUpdated":"2020-06-04T23:23:07+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Create a K-length array called <code>kPoints</code> by taking a random sample of K location points from the RDD as starting means (center points).</p>\n<p>For example, in Python:</p>\n<pre><code>kPoints = points.takeSample(False, K, 42)\n</code></pre>\n<p>Or in Scala:</p>\n<pre><code>val kPoints = points.takeSample(false, K, 42)\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1591312599991_1185735860","id":"20200426-063609_1021761524","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29870"},{"text":"%spark2\n","user":"sysadmin","dateUpdated":"2020-06-04T23:22:36+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312599992_-1069080661","id":"20200426-063608_2069532318","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29871"},{"title":"7 - Prepare the algorithm by initializing variables","text":"%md\nInitialize a variable called `tempDist` to positive infinity. The variable with be used to determine when to complete the conditional loop in the next step.","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312599993_-553730198","id":"20200426-063607_1004432380","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29872"},{"text":"%spark2\nvar tempDist = Double.PositiveInfinity","user":"sysadmin","dateUpdated":"2020-06-04T23:23:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312599993_-1570588232","id":"20200426-063607_219903234","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29873"},{"title":"8 - Implement the k-means algorithm","text":"%md\nIteratively calculate a new set of K means until the total distance (stored as `tempDist`) between the means calculated for this iteration and the last one is smaller than `convergeDist`. For each iteration:\n\n### ??? Place each subpart in its own notebook paragraph ???\n**a.** For each coordinate point, use the provided closestPoint function to map that point to the index in the kPoints array of the location closest to that point. The resulting RDD should be keyed by the index, and the value should be the pair: (point, 1). (The value 1 will later be used to count the number of points closest to a given mean.) For example:\n\n```\n    (1, ((37.43210, -121.48502), 1))\n    (4, ((33.11310, -111.33201), 1))\n    (0, ((39.36351, -119.40003), 1))\n    (1, ((40.00019, -116.44829), 1))\n    ...\n```\n\n**b.** Reduce the result: for each center in the kPoints array, sum the latitudes and longitudes, respectively, of all the points closest to that center, and also find the number of closest points. For example:\n\n```\n    (0, ((2638919.87653,-8895032.182481), 74693)))\n    (1, ((3654635.24961,-12197518.55688), 101268)))\n    (2, ((1863384.99784,-5839621.052003), 48620)))\n    (3, ((4887181.82600,-14674125.94873), 126114)))\n    (4, ((2866039.85637,-9608816.13682), 81162)))\n```\n\n**c.** The reduced RDD should have (at most) K members. Map each to a new center point by calculating the average latitude and longitude for each set of closest points: that is, map (index,(totalX,totalY),n) to (index,(totalX/n, totalY/n)).\n\n**d.** Collect these new points into a local map or array keyed by index.\n\n**e.** Use the provided distanceSquared method to calculate how much the centers \"moved\" between the current iteration and the last. That is, for each center in kPoints, calculate the distance between that point and the corresponding new point, and sum those distances. That sum is the delta between iterations; when the delta is less than convergeDist, stop iterating.\n\n**f.** Copy the new center points to the kPoints array in preparation for the next iteration.","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>??? Place each subpart in its own notebook paragraph ???</h3>\n<p><strong>a.</strong> For each coordinate point, use the provided closestPoint function to map\n<br  />that point to the index in the kPoints array of the location closest to that\n<br  />point. The resulting RDD should be keyed by the index, and the value should be\n<br  />the pair: (point, 1). (The value 1 will later be used to count the number of\n<br  />points closest to a given mean.) For example:</p>\n<pre><code>(1, ((37.43210, -121.48502), 1))\n(4, ((33.11310, -111.33201), 1))\n(0, ((39.36351, -119.40003), 1))\n(1, ((40.00019, -116.44829), 1))\n...\n</code></pre>\n<p><strong>b.</strong> Reduce the result: for each center in the kPoints array, sum the latitudes and\n<br  />longitudes, respectively, of all the points closest to that center, and also find the\n<br  />number of closest points. For example:</p>\n<pre><code>(0, ((2638919.87653,-8895032.182481), 74693)))\n(1, ((3654635.24961,-12197518.55688), 101268)))\n(2, ((1863384.99784,-5839621.052003), 48620)))\n(3, ((4887181.82600,-14674125.94873), 126114)))\n(4, ((2866039.85637,-9608816.13682), 81162)))\n</code></pre>\n<p><strong>c.</strong> The reduced RDD should have (at most) K members. Map each to a new center\n<br  />point by calculating the average latitude and longitude for each set of closest\n<br  />points: that is, map (index,(totalX,totalY),n) to (index,(totalX/\n<br  />n, totalY/n)).</p>\n<p><strong>d.</strong> Collect these new points into a local map or array keyed by index.</p>\n<p><strong>e.</strong> Use the provided distanceSquared method to calculate how much the\n<br  />centers &ldquo;moved&rdquo; between the current iteration and the last. That is, for\n<br  />each center in kPoints, calculate the distance between that point and the\n<br  />corresponding new point, and sum those distances. That sum is the delta\n<br  />between iterations; when the delta is less than convergeDist, stop iterating.</p>\n<p><strong>f.</strong> Copy the new center points to the kPoints array in preparation for the next\n<br  />iteration.</p>\n"}]},"apps":[],"jobName":"paragraph_1591312599994_148436783","id":"20200426-065024_1357965822","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29874"},{"text":"%spark2\n","user":"sysadmin","dateUpdated":"2020-06-04T23:23:39+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312599995_-2024531788","id":"20200426-065024_1326790027","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29875"},{"title":"9 - When all iterations are complete, display the final K center points","text":"%spark2\n","user":"sysadmin","dateUpdated":"2020-06-04T23:23:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312599995_383806238","id":"20200426-063606_926800641","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29876"},{"text":"%md\n# Result\n**You have now:** \n\n---","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Result</h1>\n<p><strong>You have now:</strong></p>\n<hr />\n"}]},"apps":[],"jobName":"paragraph_1591312599996_-163584929","id":"20181126-133507_1472573213","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29877"},{"text":"%md\n# Solution\n---","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Solution</h1>\n<hr />\n"}]},"apps":[],"jobName":"paragraph_1591312599996_-1239399471","id":"20181018-125200_1133281582","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29878"},{"text":"%md\n### Reviewing the Data","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312599997_-475798818","id":"20200429-211333_1219198745","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29879"},{"title":"1 - Ensure the environment is prepared for this exercise","text":"%sh\n#hdfs dfs -put /home/devuser/data/telco/static_data/devicestatus_etl /user/zeppelin/\nhdfs dfs -ls /user/zeppelin/devicestatus_etl/","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Found 3 items\n-rw-r--r--   3 zeppelin hdfs          0 2020-05-31 00:12 /user/zeppelin/devicestatus_etl/_SUCCESS\n-rw-r--r--   3 zeppelin hdfs    4616923 2020-05-31 00:12 /user/zeppelin/devicestatus_etl/part-00000\n-rw-r--r--   3 zeppelin hdfs    4617183 2020-05-31 00:12 /user/zeppelin/devicestatus_etl/part-00001\n"}]},"apps":[],"jobName":"paragraph_1591312599998_1315076389","id":"20200429-211335_1580095883","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29880"},{"title":"2 - Examine the data","text":"%sh\nhdfs dfs -head /user/zeppelin/devicestatus_etl/part-00000","user":"sysadmin","dateUpdated":"2020-06-04T23:16:39+0000","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":",-118.393732886\n2014-03-15:10:29:55,Sorrento,f326669c-16b2-4fa9-af2f-a4ca800bd139,35.9586664539,-119.236456696\n2014-03-15:10:29:55,iFruit,f4fe10c8-07e5-4eaa-bc37-760086ec2731,33.6780751575,-111.346660134\n2014-03-15:10:29:55,MeeToo,dafe4706-e0dd-4da5-8c8a-2486ef68761e,37.8158835208,-121.447245741\n2014-03-15:10:29:55,Titanic,91f9dd16-0ba0-4cc4-8365-5a05dfcf8821,37.8415316233,-122.122884963\n2014-03-15:10:29:55,Titanic,7a83c2c8-02e3-49c7-b87a-30d9aeef8a34,37.8512123294,-122.203328818\n2014-03-15:10:29:55,Sorrento,a6aa3822-21cd-46c9-b029-f9ce9a750140,37.3151790408,-121.767891693\n2014-03-15:10:29:55,Sorrento,fbe0b4bd-ed85-41c8-ad13-b11f93d16c42,0,0\n2014-03-15:10:29:55,Ronin,284ff674-a65d-4911-994f-70a62a341f00,33.9543675097,-118.014486317\n2014-03-15:10:29:55,MeeToo,d248ea6b-f0bb-48ac-91c1-85231601da70,33.9572342033,-117.919480307\n2014-03-15:10:29:55,Sorrento,d9f856a2-1231-4a12-810f-396c4132ee5e,32.121348761,-111.427626492\n2014-03-15:10:29:55,Sorrento,3f73e5a3-6a93-4f0e-833c-3cba09dd1353,36.1570242981,-114.565201682\n"}]},"apps":[],"jobName":"paragraph_1591312599999_560737159","id":"20200429-211345_621948339","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29881"},{"text":"%md\n### Calculating k-means for Device Location","user":"sysadmin","dateUpdated":"2020-06-04T23:16:40+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312599999_-457528033","id":"20200429-211344_2133815913","dateCreated":"2020-06-04T23:16:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29882"},{"title":"3 - Review the k-means code","text":"%pyspark\n#  Find K Means of Loudacre device status locations\n# \n# Input data: file(s) with device status data (delimited by ',')\n# including latitude (4th field) and longitude (5th field) of device locations \n# (lat,lon of 0,0 indicates unknown location)\n\n# NOTE: Use the %paste command to paste this code into iPython!\n# Do NOT try to paste using the terminal paste menu.\n\n# for a point p and an array of points, return the index in the array of the point closest to p\ndef closestPoint(p, points):\n    bestIndex = 0\n    closest = float(\"+inf\")\n    # for each point in the array, calculate the distance to the test point, then return\n    # the index of the array point with the smallest distance\n    for i in range(len(points)):\n        dist = distanceSquared(p,points[i])\n        if dist < closest:\n            closest = dist\n            bestIndex = i\n    return bestIndex\n    \n# The squared distances between two points\ndef distanceSquared(p1,p2):  \n    return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n\n# The sum of two points\ndef addPoints(p1,p2):\n    return [p1[0] + p2[0], p1[1] + p2[1]]\n\nsc.setLogLevel(\"WARN\")\n\n# The device status dataset\nfilename = \"/user/zeppelin/devicestatus_etl\"\n    \n# K is the number of means (center points of clusters) to find\nK = 5","user":"sysadmin","dateUpdated":"2020-06-04T23:16:40+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312600000_1480377263","id":"20200429-211343_1010367452","dateCreated":"2020-06-04T23:16:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29883"},{"title":"4 - Familiarize yourself with the algorithm","text":"%spark2\n// ConvergeDist -- the threshold \"distance\" between iterations at which we decide we are done\nval convergeDist = .01D","user":"sysadmin","dateUpdated":"2020-06-04T23:24:17+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312600000_-86706504","id":"20200429-211343_81337239","dateCreated":"2020-06-04T23:16:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29884"},{"title":"5 - Parse the input file","text":"%spark2\n// Parse the device status data file\n// Split by delimiter ,\n// Parse  latitude and longitude (4th and 5th fields) into pairs\n// Filter out records where lat/long is unavailable -- ie: 0/0 points\nval points = sc.textFile(filename).\n     map(line => line.split(',')).\n     map(fields => (fields(3).toDouble,fields(4).toDouble)).\n     filter(point => (point._1 != 0) && (point._2 != 0)).\n     persist()","user":"sysadmin","dateUpdated":"2020-06-04T23:24:29+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312600001_1312506041","id":"20200429-211341_1792181799","dateCreated":"2020-06-04T23:16:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29885"},{"title":"6 - Start the algorithm by sampling the data","text":"%spark2\n//start with K randomly selected points from the dataset\nval kPoints = points.takeSample(false, K, 424)\nprintln(\"Starting K points:\")\nkPoints.foreach(println)","user":"sysadmin","dateUpdated":"2020-06-04T23:24:38+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312600001_1060418969","id":"20200429-211340_1714795030","dateCreated":"2020-06-04T23:16:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29886"},{"title":"7 - Prepare the algorithm by initializing variables","text":"%spark2\nvar tempDist = Double.PositiveInfinity","user":"sysadmin","dateUpdated":"2020-06-04T23:24:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312600002_1872070559","id":"20200429-212528_727771702","dateCreated":"2020-06-04T23:16:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29887"},{"title":"8 - Implement the k-means algorithm","text":"%spark2\n// loop until the total distance between one iteration's points and the next is less than the convergence distance specified\nwhile (tempDist > convergeDist) {\n\n    // for each point, find the index of the closest kpoint.  map to (index, (point,1))\n    val closest = points.map(p => (closestPoint(p, kPoints), (p, 1)))\n    \n    // For each key (k-point index), reduce by adding the coordinates and number of points\n    val pointStats = closest.reduceByKey{case ((point1,n1),(point2,n2)) => (addPoints(point1,point2),n1+n2) }\n\n    // For each key (k-point index), find a new point by calculating the average of each closest point\n    val newPoints = pointStats.map{case (i,(point,n)) => (i,(point._1/n,point._2/n))}.collectAsMap()\n    \n    // calculate the total of the distance between the current points and new points\n    tempDist = 0.0\n    for (i <- 0 until K) {\n      tempDist += distanceSquared(kPoints(i),newPoints(i))\n    }\n    println(\"Distance between iterations: \"+tempDist)\n\n    // Copy the new points to the kPoints array for the next iteration\n    for (i <- 0 until K) {\n      kPoints(i) = newPoints(i)\n    }\n}","user":"sysadmin","dateUpdated":"2020-06-04T23:24:55+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312600003_1094066361","id":"20200429-212526_570419160","dateCreated":"2020-06-04T23:16:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29888"},{"title":"9 - when all iterations are complete, display the final center points","text":"%spark2\n// Display the final center points        \nprintln(\"Final K points: \" )\nkPoints.foreach(println)","user":"sysadmin","dateUpdated":"2020-06-04T23:25:06+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591312600003_448174739","id":"20200429-212525_1104857144","dateCreated":"2020-06-04T23:16:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29889"},{"text":"%md\nWe hope you've enjoyed this lab. Below are additional resources that you should find useful:\n\n1. [Hortonworks Apache Spark Tutorials](http://hortonworks.com/tutorials/#tuts-developers) are your natural next step where you can explore Spark in more depth.\n2. [Hortonworks Community Connection (HCC)](https://community.hortonworks.com/spaces/85/data-science.html?type=question) is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.\n3. [Hortonworks Apache Spark Docs](https://docs.hortonworks.com/HDPDocuments/HDP3/HDP-3.0.1/spark-overview/content/analyzing_data_with_apache_spark.html) - official Spark documentation.\n4. [Hortonworks Apache Zeppelin Docs](https://docs.hortonworks.com/HDPDocuments/HDP3/HDP-3.0.1/zeppelin-overview/content/overview.html) - official Zeppelin documentation.\n","user":"sysadmin","dateUpdated":"2020-06-04T23:16:40+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We hope you've enjoyed this lab. Below are additional resources that you should find useful:</p>\n<ol>\n<li><a href=\"http://hortonworks.com/tutorials/#tuts-developers\">Hortonworks Apache Spark Tutorials</a> are your natural next step where you can explore Spark in more depth.</li>\n<li><a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\">Hortonworks Community Connection (HCC)</a> is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.</li>\n<li><a href=\"https://docs.hortonworks.com/HDPDocuments/HDP3/HDP-3.0.1/spark-overview/content/analyzing_data_with_apache_spark.html\">Hortonworks Apache Spark Docs</a> - official Spark documentation.</li>\n<li><a href=\"https://docs.hortonworks.com/HDPDocuments/HDP3/HDP-3.0.1/zeppelin-overview/content/overview.html\">Hortonworks Apache Zeppelin Docs</a> - official Zeppelin documentation.</li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1591312600004_-2007561860","id":"20181126-133017_244739700","dateCreated":"2020-06-04T23:16:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29890"}],"name":"ScalaSpark/15-ImplementingAnIterativeAlgorithm","id":"2FA65BP1A","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"sh:shared_process":[],"jdbc:shared_process":[],"spark2:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}